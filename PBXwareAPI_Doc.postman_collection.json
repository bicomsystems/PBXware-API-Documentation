{
	"info": {
		"_postman_id": "986f4828-ac75-423e-b4dc-753e82fa75dd",
		"name": "PBXwareAPI_Doc",
		"description": "# Abstract\n\nThis document can be used as a reference guide when using PBXware API.  \nItâ€™s purpose is to help developers write 3rd party software to interact with PBXware.\n\n# Protocol\n\nPBXware API works by sending and receiving either _POST_ or _GET_  \nrequests via [HTTP](http://en.wikipedia.org/wiki/HTTP) protocol.\n\n# Authentication\n\nFor authentication purposes an unique _API key_ is used.\n\n_API key_, by default, is not set. You can set one in _Admin Settings_: _API key_.  \nMinimum key size is **10** random characters. One can also generate random key  \nin the interface itself.\n\nImportant\n\nYou must make sure _API key_ is kept secret as it expose rather critical  \nfunctionalities to 3rd parties (e.g. Delete functionality).\n\n# Requests\n\nBoth the _API key_ and all other necessary arguments are sent as part of _HTTP GET_ or  \n_HTTP POST_ request. Sample request follows:\n\n```\nGET /?apikey=my.secret.apikey&action=pbxware.did.list HTTP/1.0\nHost: pbxware.local\nUser-Agent: Mozilla/5.0\n\n ```\n\n# Responses\n\nResponse from above sample request, by default, comes in [JSON](http://www.json.org/) format.  \nClicking on the _JSON URL_ will give you more information on _JSON_ and how to use it as part of  \nyour application.\n\nOne can customize response by sending `apiformat` argument as part of the request.\n\n# Supported response formats\n\nFollowing response formats are supported by the PBXware API:\n\nResponse formats:\n\n`json` - JSON\n\n`php` - PHP (serialized)\n\n# Testing\n\nTo test API, you can use some of the CLI tools such as:\n\n- [curl](http://curl.haxx.se)\n    \n- [httpie](https://github.com/jkbr/httpie)\n    \n- [curlish](http://packages.python.org/curlish/)\n    \n\nExample for httpie:\n\n``` html\nhttp -b \"http://pbx.local/?apikey=my.secret.key&action=pbxware.ext.list\"\n\n ```\n\n# Handling errors\n\nIn case response message contains `error` key, all further  \noperations **must** be aborted on the application side. Example:\n\n```\n{\n    \"error\": \"Invalid API key.\"\n}\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26165058"
	},
	"item": [
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Ext_Online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('type', 'Extensions Online');",
									"        pm.expect(responseBody).to.have.property('count');",
									"",
									"        // Print the number of online extensions",
									"        console.log(\"Number of online extensions is \" + responseBody.count);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.ext_online&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.ext_online",
									"description": "Display number of Extensions Online"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    var failedServices = [];",
									"    var allRunning = true;",
									"",
									"    // Check each service status in the response",
									"    for (var serviceName in responseBody) {",
									"        if (responseBody.hasOwnProperty(serviceName)) {",
									"            var serviceStatus = responseBody[serviceName];",
									"            if (serviceStatus !== \"running\") {",
									"                failedServices.push(serviceName);",
									"                allRunning = false;",
									"            }",
									"        }",
									"    }",
									"",
									"    if (allRunning) {",
									"        console.log(\"All services are in running state\");",
									"        pm.test('All Services Running', function () {",
									"            pm.expect(true).to.be.true; // Mark the request as pass",
									"        });",
									"    } else {",
									"        console.error(\"Test Failed: Some services are not in running state\");",
									"        console.error(\"Failed Services:\", failedServices);",
									"        pm.test('Services Status', function () {",
									"            pm.expect.fail(\"Some services are not in running state\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.services",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.services",
									"description": "Show PBXware services"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SIP_Registrations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the 'SIP Registrations' object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData[\"SIP Registrations\"]).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Check the value of success in SIP Registrations\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['SIP Registrations']).to.exist;",
									"    const { success } = responseData['SIP Registrations'];",
									"    console.log({success});",
									"    const { failed } = responseData['SIP Registrations'];",
									"    console.log({failed});",
									"    const { lagged } = responseData['SIP Registrations'];",
									"    console.log({lagged});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.sip_registrations&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.sip_registrations",
									"description": "Show information of SIP registrations"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Calls Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('now');",
									"        pm.expect(responseBody).to.have.property('last hour');",
									"        pm.expect(responseBody).to.have.property('today');",
									"        pm.expect(responseBody).to.have.property('answared calls');",
									"        pm.expect(responseBody.now).to.be.a('number');",
									"        pm.expect(responseBody['last hour']).to.be.a('number');",
									"        pm.expect(responseBody.today).to.be.a('number');",
									"        pm.expect(responseBody['answared calls']).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.calls&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.calls",
									"description": "Calls Overview."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Glocom Editions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('office');",
									"        pm.expect(responseBody).to.have.property('business');",
									"        pm.expect(responseBody).to.have.property('agent');",
									"        pm.expect(responseBody).to.have.property('supervisor');",
									"        pm.expect(responseBody).to.have.property('ios');",
									"        pm.expect(responseBody).to.have.property('android');",
									"        pm.expect(responseBody.office).to.be.a('number');",
									"        pm.expect(responseBody.business).to.be.a('number');",
									"        pm.expect(responseBody.agent).to.be.a('number');",
									"        pm.expect(responseBody.supervisor).to.be.a('number');",
									"        pm.expect(responseBody.ios).to.be.a('number');",
									"        pm.expect(responseBody.android).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_editions&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_editions",
									"description": "Display information on apps registered to PBXware and the editions"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Glocom Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('glocom_users');",
									"        pm.expect(responseBody.glocom_users).to.be.a('number');",
									"    });",
									"",
									"    // Print the name and value of the field in the response",
									"    console.log(\"Response Details:\");",
									"    console.log(\"glocom_users: \" + responseBody.glocom_users);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_users&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_users",
									"description": "Display number of logged GloCOM users."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Licensing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('ext');",
									"        pm.expect(responseBody).to.have.property('ivr');",
									"        pm.expect(responseBody).to.have.property('queue');",
									"        pm.expect(responseBody).to.have.property('conference');",
									"        pm.expect(responseBody.ext).to.have.property('inuse');",
									"        pm.expect(responseBody.ext).to.have.property('max');",
									"        pm.expect(responseBody.ivr).to.have.property('inuse');",
									"        pm.expect(responseBody.ivr).to.have.property('max');",
									"        pm.expect(responseBody.queue).to.have.property('inuse');",
									"        pm.expect(responseBody.queue).to.have.property('max');",
									"        pm.expect(responseBody.conference).to.have.property('inuse');",
									"        pm.expect(responseBody.conference).to.have.property('max');",
									"",
									"        // Additional validation (optional)",
									"        pm.expect(responseBody.ext.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ext.max).to.be.a('number');",
									"        pm.expect(responseBody.ivr.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ivr.max).to.be.a('number');",
									"        pm.expect(responseBody.queue.inuse).to.be.a('number');",
									"        pm.expect(responseBody.queue.max).to.be.a('number');",
									"        pm.expect(responseBody.conference.inuse).to.be.a('number');",
									"        pm.expect(responseBody.conference.max).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \":\", responseBody[key]);",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.licensing&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.licensing",
									"description": "Display the percentage usage information of PBXware license for Extensions, IVRs, Queues, and Conferences"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disk Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the disk usage percentage is within a valid range (0-100%)",
									"        var diskUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(diskUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the disk usage percentage value from the response",
									"    console.log(\"Disk Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.disk_usage",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.disk_usage",
									"description": "Display information on current PBXware hard disk usage"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the CPU usage percentage is within a valid range (0-100%)",
									"        var cpuUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(cpuUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the CPU usage percentage value from the response",
									"    console.log(\"CPU Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.cpu",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.cpu",
									"description": "Display information on CPU usage on the PBXware server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the memory usage percentage is within a valid range (0-100%)",
									"        var memoryUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(memoryUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the memory usage percentage value from the response",
									"    console.log(\"Memory Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.memory",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.memory",
									"description": "Display information on PBXware memory usage"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Dashboard\n\nSupported Methods:\n\n`ext_online` - Display number of Extensions Online\n\n`services` - Display PBXware services\n\n`sip_registrations` - Display information for SIP registration\n\n`calls` - Calls Overview\n\n`glocom_editions` - Display information on apps registered to PBXware and the editions\n\n`glocom_users` - Display number of logged GloCOM users\n\n`licensing` - Display the percentage usage information of PBXware license\n\n`disk_usage` - Display information on current PBXware hard disk usage\n\n`cpu` - Display information on CPU usage on the PBXware server\n\n`memory` - Display information on PBXware memory usage"
		},
		{
			"name": "Extensions",
			"item": [
				{
					"name": "Add Extensions",
					"item": [
						{
							"name": "Add Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if the response contains the expected fields",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
											"    });",
											"",
											"    // Print the success message and extension ID from the response",
											"    console.log(responseBody.success);",
											"    console.log(\"Extension ID:\", responseBody.id);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{tenantID}}&name={{name}}&email={{email}}&ext={{extension}}&location=2&ua=50&secret={{secret}}&pin={{pin}}&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}",
											"description": "API Key"
										},
										{
											"key": "action",
											"value": "pbxware.ext.add",
											"description": "Action"
										},
										{
											"key": "server",
											"value": "{{tenantID}}",
											"description": "Tenant/Server ID (Required)"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
										},
										{
											"key": "email",
											"value": "{{email}}",
											"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. (Regex: /^\\\\d{3}$/)"
										},
										{
											"key": "location",
											"value": "2",
											"description": "Location (Local=1, Remote=2) (Required)"
										},
										{
											"key": "ua",
											"value": "50",
											"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
										},
										{
											"key": "secret",
											"value": "{{secret}}",
											"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
										},
										{
											"key": "password",
											"value": "",
											"description": "User Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)",
											"disabled": true
										},
										{
											"key": "pin",
											"value": "{{pin}}",
											"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
										},
										{
											"key": "prot",
											"value": "sip",
											"description": "Protocol ('sip' and 'iax' only!) (Required)"
										},
										{
											"key": "status",
											"value": "1",
											"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
										},
										{
											"key": "incominglimit",
											"value": "2",
											"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
										},
										{
											"key": "outgoinglimit",
											"value": "2",
											"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
										},
										{
											"key": "voicemail",
											"value": "1",
											"description": "Voicemail (Yes=1, No=0) (Required)"
										},
										{
											"key": "title",
											"value": "",
											"description": "Title. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "uad_sipheaders",
											"value": "",
											"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
											"disabled": true
										},
										{
											"key": "label",
											"value": "",
											"description": "Label. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_location",
											"value": "",
											"description": "User Location. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_language",
											"value": "",
											"description": "User lenguage. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "department",
											"value": "",
											"description": "Department ID. (Regex: /^[\\\\d,]+$/)",
											"disabled": true
										},
										{
											"key": "dtmfmode",
											"value": "",
											"description": "DTMF Mode (auto, inband, rfc2833, info).",
											"disabled": true
										},
										{
											"key": "authname",
											"value": "",
											"description": "Authentification name. (Regex: /^\\\\w+$/)",
											"disabled": true
										},
										{
											"key": "auth",
											"value": "",
											"description": "Auth. (Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
											"disabled": true
										},
										{
											"key": "sso_enabled",
											"value": "",
											"description": "Single Sign-On enabled (Yes=1, No=0).",
											"disabled": true
										},
										{
											"key": "billing",
											"value": "",
											"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
											"disabled": true
										},
										{
											"key": "call_rating",
											"value": "",
											"description": "Call Rating (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "creditlimit",
											"value": "",
											"description": "Credit limit (number, 12 digits max, required if Billing=1)",
											"disabled": true
										},
										{
											"key": "reminderbalance",
											"value": "",
											"description": "Reminder balance (number, 5 digits max, required if Billing=1)",
											"disabled": true
										},
										{
											"key": "service_plan",
											"value": "",
											"description": "Service Plan ID (required if Billing=1)",
											"disabled": true
										},
										{
											"key": "nat",
											"value": "",
											"description": "NAT (Yes=1, No=0, Never=2)",
											"disabled": true
										},
										{
											"key": "canreinvite",
											"value": "",
											"description": "SIP Re-INVITE support (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "qualify",
											"value": "",
											"description": "Qualify (4 digits max)",
											"disabled": true
										},
										{
											"key": "ringtime",
											"value": "",
											"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
											"disabled": true
										},
										{
											"key": "incoming_dialoptions",
											"value": "",
											"description": "(Regex: /^[0tTr]+$/)",
											"disabled": true
										},
										{
											"key": "outgoing_dialoptions",
											"value": "",
											"description": "(Regex: /^[tTr]+$/)",
											"disabled": true
										},
										{
											"key": "autoprovisiong",
											"value": "",
											"description": "Auto provisioning (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "dhcp",
											"value": "",
											"description": "DHCP (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "staticip",
											"value": "",
											"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "netmask",
											"value": "",
											"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "",
											"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns1",
											"value": "",
											"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns2",
											"value": "",
											"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "macaddress",
											"value": "",
											"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
											"disabled": true
										},
										{
											"key": "voicemail_timezone",
											"value": "",
											"description": "Voicemail timezone (Germany, USAâ€¦â€‹). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "vm_greeting_message",
											"value": "",
											"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
											"disabled": true
										},
										{
											"key": "setcallerid",
											"value": "",
											"description": "Set CallerID (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acodecs",
											"value": "",
											"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
											"disabled": true
										},
										{
											"key": "page",
											"value": "",
											"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycomâ€™s Default\n5 - Sipura\n6 - Snom phones",
											"disabled": true
										},
										{
											"key": "page_custom",
											"value": "",
											"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "recordcalls",
											"value": "",
											"description": "Record calls (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "recordsilent",
											"value": "",
											"description": "Silent recording (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailsend",
											"value": "",
											"description": "Send E-mail (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailattach",
											"value": "",
											"description": "Attach (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmaildelete",
											"value": "",
											"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acc_slave",
											"value": "1",
											"description": "Slave (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "slave_accountcode",
											"value": "",
											"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": "",
											"description": "Send E-mail with account details (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "service_plan_date",
											"value": "",
											"description": "Service Plan Date (dd-mm-YYYY)",
											"disabled": true
										},
										{
											"key": "limitenable",
											"value": "",
											"description": "Enable Limits (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "limittype",
											"value": "",
											"description": "Limit Type (Daily, Monthly)",
											"disabled": true
										},
										{
											"key": "softlimit",
											"value": "",
											"description": "Soft Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "hardlimit",
											"value": "",
											"description": "Hard Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "notification_email",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "cf_billing_disable",
											"value": "",
											"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
											"disabled": true
										},
										{
											"key": "cf_call_rating_disable",
											"value": "",
											"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "webrtc",
											"value": "",
											"description": "(Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "defaultip",
											"value": "",
											"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "max_contacts",
											"value": "",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "encryption",
											"value": "",
											"description": "Encryption (yes,offer)",
											"disabled": true
										},
										{
											"key": "directrtpsetup",
											"value": "",
											"description": "Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "callingpres",
											"value": "",
											"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
											"disabled": true
										},
										{
											"key": "cid_anon",
											"value": "",
											"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "ringtoneforlocalcalls",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "ringtonefortransferredcalls",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "cidmatchdid",
											"value": "",
											"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "dropanonymous",
											"value": "",
											"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "trustrpid",
											"value": "",
											"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "sendrpid",
											"value": "",
											"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
											"disabled": true
										},
										{
											"key": "trust_id_outbound",
											"value": "",
											"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_connectedline",
											"value": "",
											"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_update",
											"value": "",
											"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "pai_header",
											"value": "",
											"description": "(Regex: /^\\\\w{1,64}$/)",
											"disabled": true
										},
										{
											"key": "callgroup",
											"value": "",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "pickupgroup",
											"value": "",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "primary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "primary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "override_lcr",
											"value": "",
											"description": "Override LCR (Yes/No/NotSet). (Regex: /^(1|0|2)$/).",
											"disabled": true
										},
										{
											"key": "busylevel",
											"value": "",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "limit_notify_play_sound",
											"value": "",
											"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "limit_notify_send_email",
											"value": "",
											"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "busyvoicemail",
											"value": "",
											"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "mailboxes",
											"value": "",
											"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
											"disabled": true
										},
										{
											"key": "vmailpager",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "vmailskipinst",
											"value": "",
											"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailskippin",
											"value": "",
											"description": "(Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "vmailsaycid",
											"value": "",
											"description": "Say CallerID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailreview",
											"value": "",
											"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailoperator",
											"value": "",
											"description": "Allow Operator: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailenvelope",
											"value": "",
											"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailhidefromdir",
											"value": "",
											"description": "Hide from directory: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "videosupport",
											"value": "",
											"description": "Video Support: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "autoframing",
											"value": "",
											"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmaildelay",
											"value": "",
											"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailopext",
											"value": "",
											"description": "Operator Extension. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailnrings",
											"value": "",
											"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "force_codec",
											"value": "",
											"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
											"disabled": true
										},
										{
											"key": "hd_logout_time",
											"value": "",
											"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
											"disabled": true
										},
										{
											"key": "record_beep_ext",
											"value": "",
											"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "pbd_pin",
											"value": "",
											"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "areacode",
											"value": "",
											"description": "(Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "busylevel_incoming",
											"value": "",
											"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "jbimpl",
											"value": "",
											"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
											"disabled": true
										},
										{
											"key": "jbmaxsize",
											"value": "",
											"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "jbresyncthreshold",
											"value": "",
											"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "jbtargetextra",
											"value": "",
											"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "show_in_dir",
											"value": "",
											"description": "Show In Directory (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "show_in_app",
											"value": "",
											"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "app_default_client_phone",
											"value": "",
											"description": "Default Client Phone. (Regex: ^(|softphone|deskphone)$/)",
											"disabled": true
										},
										{
											"key": "additional_config",
											"value": "",
											"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "ua_autoprov",
											"value": "",
											"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "rating_info_osc",
											"value": "",
											"description": "Show Call Rating Info in OSC. (Yes=1, No=0).",
											"disabled": true
										},
										{
											"key": "disable_fax_for_app",
											"value": "",
											"description": "Disable FAX for gloCOM (Yes=1, No=0, NotSet = 2)",
											"disabled": true
										},
										{
											"key": "disable_my_dialer_for_app",
											"value": "",
											"description": "Disable Personal Dialer for gloCOM (Yes=1, No =0, NotSet = 2)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Add Extension"
				},
				{
					"name": "Editing Extensions",
					"item": [
						{
							"name": "Editing Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if the response contains the expected fields",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
											"    });",
											"",
											"    // Print the success message and extension ID from the response",
											"    console.log(responseBody.success);",
											"    console.log(\"Extension ID:\", responseBody.id);",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}",
											"description": "API Key"
										},
										{
											"key": "action",
											"value": "pbxware.ext.edit"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant/Server ID (Required)"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension IDs (Required) (Use CSV file ExtensionIDs.csv to edit multiple extensions)"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Full Name (Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email}}",
											"description": "E-mail (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"description": "Location (Local=1, Remote=2)",
											"disabled": true
										},
										{
											"key": "ua",
											"value": "",
											"description": "User Agent Device ID (number only) (50 is for Generic SIP)",
											"disabled": true
										},
										{
											"key": "secret",
											"value": "{{secret}}",
											"description": "Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)",
											"disabled": true
										},
										{
											"key": "password",
											"value": "",
											"description": "User Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)",
											"disabled": true
										},
										{
											"key": "pin",
											"value": "{{pin}}",
											"description": "PIN. (Regex: /^\\\\d{4,4}$/)",
											"disabled": true
										},
										{
											"key": "prot",
											"value": "",
											"description": "Protocol ('sip' and 'iax' only!)",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status (Active=1, Not Active=0, Suspended=2)",
											"disabled": true
										},
										{
											"key": "incominglimit",
											"value": "",
											"description": "Incoming limit. (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "outgoinglimit",
											"value": "",
											"description": "Outgoing limit. (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "voicemail",
											"value": "",
											"description": "Voicemail (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "title",
											"value": "",
											"description": "Title. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "uad_sipheaders",
											"value": "",
											"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
											"disabled": true
										},
										{
											"key": "label",
											"value": "",
											"description": "Label. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_location",
											"value": "",
											"description": "User Location. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_language",
											"value": "",
											"description": "User lenguage. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "department",
											"value": "",
											"description": "Department ID. (Regex: /^[\\\\d,]+$/).",
											"disabled": true
										},
										{
											"key": "dtmfmode",
											"value": "",
											"description": "DTMF Mode (auto, inband, rfc2833, info).",
											"disabled": true
										},
										{
											"key": "authname",
											"value": "",
											"description": "Authentification name. (Regex: /^\\\\w+$/)",
											"disabled": true
										},
										{
											"key": "auth",
											"value": "",
											"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
											"disabled": true
										},
										{
											"key": "sso_enabled",
											"value": "",
											"description": "Single Sign-On enabled (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "billing",
											"value": "",
											"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
											"disabled": true
										},
										{
											"key": "call_rating",
											"value": "",
											"description": "Call Rating (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "creditlimit",
											"value": "",
											"description": "Credit limit (number, 12 digits max, required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "reminderbalance",
											"value": "",
											"description": "Reminder balance (number, 5 digits max, required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "service_plan",
											"value": "",
											"description": "Service Plan ID (required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "nat",
											"value": "",
											"description": "NAT (Yes=1, No=0, Never=2)",
											"disabled": true
										},
										{
											"key": "canreinvite",
											"value": "",
											"description": "SIP Re-INVITE support (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "qualify",
											"value": "",
											"description": "Qualify (4 digits max)",
											"disabled": true
										},
										{
											"key": "ringtime",
											"value": "",
											"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
											"disabled": true
										},
										{
											"key": "incoming_dialoptions",
											"value": "",
											"description": "(Regex: /^[0tTr]+$/)",
											"disabled": true
										},
										{
											"key": "outgoing_dialoptions",
											"value": "",
											"description": "(Regex: /^[tTr]+$/)",
											"disabled": true
										},
										{
											"key": "autoprovisiong",
											"value": "",
											"description": "Auto provisioning (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "dhcp",
											"value": "",
											"description": "DHCP (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "staticip",
											"value": "",
											"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "netmask",
											"value": "",
											"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "",
											"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns1",
											"value": "",
											"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns2",
											"value": "",
											"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "macaddress",
											"value": "",
											"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
											"disabled": true
										},
										{
											"key": "voicemail_timezone",
											"value": "",
											"description": "Voicemail timezone (Germany, USAâ€¦â€‹). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "vm_greeting_message",
											"value": "",
											"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
											"disabled": true
										},
										{
											"key": "setcallerid",
											"value": "",
											"description": "Set CallerID (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acodecs",
											"value": "",
											"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
											"disabled": true
										},
										{
											"key": "page",
											"value": "",
											"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycomâ€™s Default\n5 - Sipura\n6 - Snom phones",
											"disabled": true
										},
										{
											"key": "page_custom",
											"value": "",
											"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "recordcalls",
											"value": "",
											"description": "Record calls (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "recordsilent",
											"value": "",
											"description": "Silent recording (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailsend",
											"value": "",
											"description": "Send E-mail (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailattach",
											"value": "",
											"description": "Attach (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmaildelete",
											"value": "",
											"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acc_slave",
											"value": "",
											"description": "Slave (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "slave_accountcode",
											"value": "",
											"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": "",
											"description": "Send E-mail with account details (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "service_plan_date",
											"value": "",
											"description": "Service Plan Date (dd-mm-YYYY)",
											"disabled": true
										},
										{
											"key": "limitenable",
											"value": "",
											"description": "Enable Limits (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "limittype",
											"value": "",
											"description": "Limit Type (Daily, Monthly)",
											"disabled": true
										},
										{
											"key": "softlimit",
											"value": "",
											"description": "Soft Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "hardlimit",
											"value": "",
											"description": "Hard Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "notification_email",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "cf_billing_disable",
											"value": "",
											"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
											"disabled": true
										},
										{
											"key": "cf_call_rating_disable",
											"value": "",
											"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "webrtc",
											"value": "",
											"description": "(Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "defaultip",
											"value": "",
											"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "max_contacts",
											"value": "",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "encryption",
											"value": "",
											"description": "Encryption (yes,offer)",
											"disabled": true
										},
										{
											"key": "directrtpsetup",
											"value": "",
											"description": "Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "callingpres",
											"value": "",
											"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
											"disabled": true
										},
										{
											"key": "cid_anon",
											"value": "",
											"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "ringtoneforlocalcalls",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "ringtonefortransferredcalls",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "cidmatchdid",
											"value": "",
											"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "dropanonymous",
											"value": "",
											"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "trustrpid",
											"value": "",
											"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "sendrpid",
											"value": "",
											"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
											"disabled": true
										},
										{
											"key": "trust_id_outbound",
											"value": "",
											"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_connectedline",
											"value": "",
											"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_update",
											"value": "",
											"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "pai_header",
											"value": "",
											"description": "(Regex: /^\\\\w{1,64}$/)",
											"disabled": true
										},
										{
											"key": "callgroup",
											"value": "",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "pickupgroup",
											"value": "",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "primary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "primary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_emerg_trunk",
											"value": "",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "override_lcr",
											"value": "",
											"description": "Override LCR (Yes/No/NotSet). (Regex: /^(1|0|2)$/).",
											"disabled": true
										},
										{
											"key": "busylevel",
											"value": "",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "limit_notify_play_sound",
											"value": "",
											"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "limit_notify_send_email",
											"value": "",
											"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "busyvoicemail",
											"value": "",
											"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "mailboxes",
											"value": "",
											"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
											"disabled": true
										},
										{
											"key": "vmailpager",
											"value": "",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "vmailskipinst",
											"value": "",
											"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailskippin",
											"value": "",
											"description": "(Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "vmailsaycid",
											"value": "",
											"description": "Say CallerID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailreview",
											"value": "",
											"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailoperator",
											"value": "",
											"description": "Allow Operator: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailenvelope",
											"value": "",
											"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailhidefromdir",
											"value": "",
											"description": "Hide from directory: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "videosupport",
											"value": "",
											"description": "Video Support: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "autoframing",
											"value": "",
											"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmaildelay",
											"value": "",
											"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailopext",
											"value": "",
											"description": "Operator Extension. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailnrings",
											"value": "",
											"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "force_codec",
											"value": "",
											"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
											"disabled": true
										},
										{
											"key": "hd_logout_time",
											"value": "",
											"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
											"disabled": true
										},
										{
											"key": "record_beep_ext",
											"value": "",
											"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "pbd_pin",
											"value": "",
											"description": "Pin Based Dialing Pin (Must be enabled in license) (number, 5 digits)",
											"disabled": true
										},
										{
											"key": "areacode",
											"value": "",
											"description": "(Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "busylevel_incoming",
											"value": "",
											"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "jbimpl",
											"value": "",
											"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
											"disabled": true
										},
										{
											"key": "jbmaxsize",
											"value": "",
											"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "jbresyncthreshold",
											"value": "",
											"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "jbtargetextra",
											"value": "",
											"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "show_in_dir",
											"value": "",
											"description": "Show In Directory (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "show_in_app",
											"value": "",
											"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "app_default_client_phone",
											"value": "",
											"description": "Default Client Phone. (Regex: /^(|softphone|deskphone)$/)",
											"disabled": true
										},
										{
											"key": "additional_config",
											"value": "",
											"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "ua_autoprov",
											"value": "",
											"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "rating_info_osc",
											"value": "",
											"description": "Show Call Rating Info in OSC. (Yes=1, No=0).",
											"disabled": true
										},
										{
											"key": "disable_fax_for_app",
											"value": "",
											"description": "Disable FAX for gloCOM (Yes=1, No=0, NotSet = 2)",
											"disabled": true
										},
										{
											"key": "disable_my_dialer_for_app",
											"value": "",
											"description": "Disable Personal Dialer for gloCOM (Yes=1, No =0, NotSet = 2)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Edit Extension"
				},
				{
					"name": "Deleting Extensions",
					"item": [
						{
							"name": "Deleting Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate success response",
											"    pm.test('Success Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"",
											"    // Print the success message",
											"    console.log(\"Success: \" + responseBody.success);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.delete"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server or Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Delete Extension"
				},
				{
					"name": "Credit/Debit Balance",
					"item": [
						{
							"name": "Credit/Debit Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate success response",
											"    pm.test('Success Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"",
											"    // Print the success message",
											"    console.log(\"Success: \" + responseBody.success);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.balance&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&mode=&amount=&notes=&refno=",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.balance"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant or server ID"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension ID, or list of IDs from CSV file"
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Note: You cannot supply id and ext at the same time!",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "",
											"description": "Either \"credit\" or \"debit\""
										},
										{
											"key": "amount",
											"value": "",
											"description": "Amount to credit/debit onto balance (Regex: /^([0-9]+|[0-9]+\\\\.[0-9]+)$/)"
										},
										{
											"key": "notes",
											"value": "",
											"description": "Notes in regards to this update. (Regex: /^.+$/)"
										},
										{
											"key": "refno",
											"value": "",
											"description": "Reference Number (Regex: /^.+$/)"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Credit/Debit Balance"
				},
				{
					"name": "Reset Inclusive Minutes",
					"item": [
						{
							"name": "Reset Inclusive Minutes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        // Print the success message",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.reset_inclusive_minutes&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.reset_inclusive_minutes",
											"description": "Reset Inclusive Minutes"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension ID. Use CSV files for list of extensions."
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. Note: You cannot supply id and ext at the same time!",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Reset Inclusive Minutes"
				},
				{
					"name": "Delete Voicemail",
					"item": [
						{
							"name": "Voicemail Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        // Print the success message",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.voicemail.delete&server={{Srv/Tenant-ID}}&ext={{extension}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.voicemail.delete",
											"description": "Delete extensions voicemail."
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number (Required)"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Delete Extension Voicemails.\n\n**Warning** - This API call will delete ALL voicemails for the given extension!"
				},
				{
					"name": "Enhanced Services",
					"item": [
						{
							"name": "Caller ID",
							"item": [
								{
									"name": "Caller ID set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"",
													"        // Validate the \"callerid\" field",
													"        pm.test('CallerID Field Validation', function () {",
													"            pm.expect(responseBody).to.have.property('callerid').that.is.a('string');",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"success\" field",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody.success).to.include('Caller ID: ');",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerid=&emergencycid=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.edit"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerid",
													"value": "",
													"description": "Specify caller ID to be set. (Required)"
												},
												{
													"key": "emergencycid",
													"value": "",
													"description": "Emergency CallerID."
												},
												{
													"key": "anums",
													"value": "",
													"description": "Allowed list of CallerIDs. (Regex: /^(:|(([\\\\+]?[\\\\d\\\\s])+))+$/)",
													"disabled": true
												},
												{
													"key": "alabels",
													"value": "",
													"description": "Labels for Allowed list of CallerIDs. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
													"disabled": true
												},
												{
													"key": "acodes",
													"value": "",
													"description": "Short Codes for Allowed list of CallerIDs. (Regex: /^(([\\\\d]?(:([\\\\d])?)+)|[\\\\d])$/)",
													"disabled": true
												},
												{
													"key": "trunks",
													"value": "",
													"description": "Specify list of trunk names separated by colon :. (Regex: /^(:|[a-zA-Z0-9_.-]+)+$/)",
													"disabled": true
												},
												{
													"key": "tcallerids",
													"value": "",
													"description": "Specify list of caller ids for specified trunks.. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
													"disabled": true
												},
												{
													"key": "tprivacies",
													"value": "",
													"description": "Specify list of privacies separated by colon : (0 â‡’ anonymous, 1 â‡’ anonymous_id, 2 â‡’ anonymous_number, 3 â‡’ anonymous_number_id, 4 â‡’ none).",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Filters & Blocking",
							"item": [
								{
									"name": "Call Filters & Blocking set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"callers,\" \"dtypes,\" and \"destinations\" fields",
													"    pm.test('Callers Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('callers').that.is.an('array');",
													"        responseBody.callers.forEach(function (caller) {",
													"            pm.expect(caller).to.be.a('string');",
													"        });",
													"    });",
													"",
													"    pm.test('Dtypes Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('dtypes').that.is.an('array');",
													"        responseBody.dtypes.forEach(function (dtype) {",
													"            pm.expect(dtype).to.be.a('string');",
													"        });",
													"    });",
													"",
													"    pm.test('Destinations Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"        responseBody.destinations.forEach(function (destination) {",
													"            pm.expect(destination).to.be.a('string');",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"success\" and \"callfilters\" fields",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody.success).to.equal('Call Filters & Blocking.'); // Adjust expected value if needed",
													"    });",
													"",
													"    pm.test('Call Filters Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('callfilters').that.is.a('string');",
													"        pm.expect(responseBody.callfilters).to.equal('OK'); // Adjust expected value if needed",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callers=anonymous,&dtypes=not in service,&destinations=0,&telemarketer=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callers",
													"value": "anonymous,",
													"description": "List of caller numbers separated with comma ,. This list must start with anonymous value for anonymous callers. (Required) "
												},
												{
													"key": "dtypes",
													"value": "not in service,",
													"description": "Destination types list separated with comma ,. Following values are possible: call forward number|no answer|busy|voicemail|not in service (Required)"
												},
												{
													"key": "destinations",
													"value": "0,",
													"description": "List of destinations separated with comma ,. (numbers only) (Required)"
												},
												{
													"key": "telemarketer",
													"value": "1",
													"description": "Telemarketer block yes or no (1 or 0)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Screening",
							"item": [
								{
									"name": "Call Screening set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if timeout is a number",
													"        pm.expect(responseBody.timeout).to.be.a('string');",
													"        ",
													"        // Check if dopts, dtype, replacecid, preamble, greeting, pausebeforerec, recordlen, greetingwithname, lastd, and voicemail are strings",
													"        pm.expect(responseBody.dopts).to.be.a('string');",
													"        pm.expect(responseBody.dtype).to.be.a('string');",
													"        pm.expect(responseBody.replacecid).to.be.a('string');",
													"        pm.expect(responseBody.preamble).to.be.a('string');",
													"        pm.expect(responseBody.greeting).to.be.a('string');",
													"        pm.expect(responseBody.pausebeforerec).to.be.a('string');",
													"        pm.expect(responseBody.recordlen).to.be.a('string');",
													"        pm.expect(responseBody.greetingwithname).to.be.a('string');",
													"        pm.expect(responseBody.lastd).to.be.a('string');",
													"        pm.expect(responseBody.voicemail).to.be.a('string');",
													"",
													"        // Check if destionations and delays are arrays with the same length",
													"        pm.expect(responseBody.destinations).to.be.an('array');",
													"        pm.expect(responseBody.delays).to.be.an('array');",
													"        pm.expect(responseBody.destinations.length).to.eql(responseBody.delays.length);",
													"",
													"        // Check if suspends is either an empty string, an array, or an object",
													"        pm.expect(responseBody.suspends).to.satisfy((suspends) => {",
													"            return typeof suspends === 'string' || Array.isArray(suspends) || typeof suspends === 'object';",
													"        });",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if callscreening is a string",
													"        pm.expect(responseBody.callscreening).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=422&delays=0&suspends=0&recordlen=30",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "422",
													"description": "List of destinations separated with comma ,. (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "delays",
													"value": "0",
													"description": "List of delays separated with comma ,. (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "suspends",
													"value": "0",
													"description": "List of suspend values (0 or 1) separated with comma ,. (Required). (Regex: /^(,|0|1)+$/)"
												},
												{
													"key": "recordlen",
													"value": "30",
													"description": "Max recording length (sec). (Required). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "timeout",
													"value": "15",
													"description": "Timeout in seconds.",
													"disabled": true
												},
												{
													"key": "dopts",
													"value": "Tr",
													"description": "Dial options (trT).",
													"disabled": true
												},
												{
													"key": "dtypes",
													"value": "1",
													"description": "Dial type, 0 or 1 (simultaneous or sequential).",
													"disabled": true
												},
												{
													"key": "replacecid",
													"value": "888999",
													"description": "Replace Caller ID. (Regex: /^\\\\d+$/)",
													"disabled": true
												},
												{
													"key": "preamble",
													"value": "1",
													"description": "Preamble. (Regex: /^\\\\d+$/)",
													"disabled": true
												},
												{
													"key": "greeting",
													"value": "Test",
													"description": "Greeting. (Regex: /^.+$/).",
													"disabled": true
												},
												{
													"key": "pausebeforerec",
													"value": "5",
													"description": "Pause before recording (sec). (Regex: /^([0-9]|10)$/)",
													"disabled": true
												},
												{
													"key": "greetingwithname",
													"value": "no",
													"description": "Greeting with name. (Regex: /^(yes|no)$/)",
													"disabled": true
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)",
													"disabled": true
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Last destination is voicemail. (Regex: /^(0|1)$/)",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Do Not Disturbe",
							"item": [
								{
									"name": "Do Not Disturb set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if dnd is a number",
													"        pm.expect(responseBody.dnd).to.be.a('string');",
													"        ",
													"        // Check if dst is a string",
													"        pm.expect(responseBody.dst).to.be.a('string');",
													"        ",
													"        // Check if dsttype is a string",
													"        pm.expect(responseBody.dsttype).to.be.a('string');",
													"        ",
													"        // Check if duration is either null or a number",
													"        pm.expect(responseBody.duration).to.satisfy(function (value) {",
													"            return value === null || typeof value === 'string';",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if dnd is a string",
													"        pm.expect(responseBody.dnd).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&dnd=2&dst=425&dsttype=voicemail&duration=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dnd",
													"value": "2",
													"description": "Set dnd temporary or not active (0, 1 or 2 for Not Active, Temporary and Permanent). (Regex: /^(0|1|2)$/)"
												},
												{
													"key": "dst",
													"value": "425",
													"description": "Destination value (numbers only). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dsttype",
													"value": "voicemail",
													"description": "Destination type voicemail or call forward. (Regex: /^(voicemail|call forward)$/)"
												},
												{
													"key": "duration",
													"value": "1",
													"description": "Duration in hours (numbers only)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Pickup",
							"item": [
								{
									"name": "Call Pickup set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Last Caller",
							"item": [
								{
									"name": "Last Caller set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Forwarding",
							"item": [
								{
									"name": "Call Forwarding set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if enabled is a string",
													"        pm.expect(responseBody.enabled).to.be.a('string');",
													"        ",
													"        // Check if destinations is a string",
													"        pm.expect(responseBody.destinations).to.be.a('string');",
													"        ",
													"        // Check if timeouts is a string",
													"        pm.expect(responseBody.timeouts).to.be.a('string');",
													"        ",
													"        // Check if play is a number",
													"        pm.expect(responseBody.play).to.be.a('number');",
													"        ",
													"        // Check if cid is a number",
													"        pm.expect(responseBody.cid).to.be.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if callfwd is a string",
													"        pm.expect(responseBody.callfwd).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&enabled=unconditional,busy,no answer&uncond_dests=422,423,424&busy_dests=424,425&noansw_dests=423&unavail_dests=424&uncond_timeouts=15&busy_timeouts=15&noansw_timeouts=15&unavail_timeouts=20&play=0&cid=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "enabled",
													"value": "unconditional,busy,no answer",
													"description": "Comma , separated list of enabled call forward conditions, Following values are accepted: unconditional|busy|no answer|line unavailable. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "uncond_dests",
													"value": "422,423,424",
													"description": "Comma , separated list of unconditional destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "busy_dests",
													"value": "424,425",
													"description": "Comma , separated list of busy destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "noansw_dests",
													"value": "423",
													"description": "Comma , separated list of no answer destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "unavail_dests",
													"value": "424",
													"description": "Comma , separated list of unavailable destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "uncond_timeouts",
													"value": "15",
													"description": "Comma , separated list of unconditional timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "busy_timeouts",
													"value": "15",
													"description": "Comma , separated list of busy timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "noansw_timeouts",
													"value": "15",
													"description": "Comma , separated list of no answer timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "unavail_timeouts",
													"value": "20",
													"description": "Comma , separated list of unavailable timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "play",
													"value": "0",
													"description": "Play enable disable 1 or 0. (Regex: /^(0|1)$/)"
												},
												{
													"key": "cid",
													"value": "1",
													"description": "Caller ID enable disable 1 or 0. (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Follow Me",
							"item": [
								{
									"name": "Follow Me set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if destinations is an array",
													"        pm.expect(responseBody.destinations).to.be.an('array');",
													"        // Check if timeouts is an array",
													"        pm.expect(responseBody.timeouts).to.be.an('array');",
													"        // Check if dopts is a string",
													"        pm.expect(responseBody.dopts).to.be.a('string');",
													"        // Check if lastd is a string",
													"        pm.expect(responseBody.lastd).to.be.a('string');",
													"        // Check if voicemail is a string",
													"        pm.expect(responseBody.voicemail).to.be.a('string');",
													"        // Check if confirm_calls is a string",
													"        pm.expect(responseBody.confirm_calls).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if followme is a string",
													"        pm.expect(responseBody.followme).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=422,423&timeouts=10,15&dopts=Tr&lastd=425&voicemail=1&confirm_calls=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "422,423",
													"description": "Comma separated , list of destinations (Required). Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "timeouts",
													"value": "10,15",
													"description": "Comma separated , list of timeouts (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "dopts",
													"value": "Tr",
													"description": "Dial options (trT). (Regex: /^[tTr]+$/)"
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
												},
												{
													"key": "confirm_calls",
													"value": "0",
													"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Instant Recording",
							"item": [
								{
									"name": "Instant Recording set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if silent is a string",
													"        pm.expect(responseBody.silent).to.be.a('string');",
													"        // Check if emailrec is a string",
													"        pm.expect(responseBody.emailrec).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        // Check if instrecord is a string",
													"        pm.expect(responseBody.instrecord).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&silent=0&emailrec=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "silent",
													"value": "0",
													"description": "Silent (0,1) (Required). (Regex: /^(0|1)$/)"
												},
												{
													"key": "emailrec",
													"value": "0",
													"description": "E-mail recording (0,1) (Required). (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Remote Access",
							"item": [
								{
									"name": "Remote Access set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('callerids').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('pins').that.is.an('array');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('remoteaccess').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerids=123456,789654&pins=0,1&requirepin=1&timeout=99999999&dopts=t",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.edit",
													"description": "Fields callerids names and pins not correspond to each other."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerids",
													"value": "123456,789654",
													"description": "Comma separated , list of Caller IDâ€™s (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "pins",
													"value": "0,1",
													"description": "Comma separated , list of PINâ€™s - yes or no 1 or 0 (Required). (Regex: /^(,|0|1)+$/)"
												},
												{
													"key": "requirepin",
													"value": "1",
													"description": "Require Extension PIN 1 or 0 (Required). (Regex: /^(0|1)$/)"
												},
												{
													"key": "timeout",
													"value": "99999999",
													"description": "Timeout in seconds (Optional). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dopts",
													"value": "t",
													"description": "Dial options (tTr) (Optional). (Regex: /^[tTr]+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Phone Callback",
							"item": [
								{
									"name": "Phone Callback set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('callerids').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('numbers').that.is.an('array');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        // Check if instrecord is a string",
													"        pm.expect(responseBody.instrecord).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerids=&numbers=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.edit"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerids",
													"value": "",
													"description": "Comma separated , list of Caller IDâ€™s (Required)"
												},
												{
													"key": "numbers",
													"value": "",
													"description": "Comma separated , list of numbers (Required)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group Hunt",
							"item": [
								{
									"name": "Group Hunt set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('delays').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('suspends').that.satisfy(function(value) {",
													"            return Array.isArray(value) || typeof value === 'string';",
													"        });",
													"        pm.expect(responseBody).to.have.property('dopts').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('lastd').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('timeout').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('voicemail').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('confirmcalls').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('grouphunt').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=424,425&delays=10,20&suspends=1,0&timeout=20&dopts=t&lastd=425&voicemail=1&confirmcalls=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.edit",
													"description": "Fields destinations, delays and suspends lists must match in size"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "424,425",
													"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "delays",
													"value": "10,20",
													"description": "Comma separated , list of delays (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "suspends",
													"value": "1,0",
													"description": "Comma separated , list of suspends (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "timeout",
													"value": "20",
													"description": "Timeout in seconds. (Regex: /^\\\\d+$/)."
												},
												{
													"key": "dopts",
													"value": "t",
													"description": "Dial options (tTr). (Regex: /^[tTr]+$/)"
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Voicemail 1 or 0"
												},
												{
													"key": "confirmcalls",
													"value": "0",
													"description": "Confirm calls 1 or 0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mobile Numbers",
							"item": [
								{
									"name": "Mobile Numbers set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if the response is an array or an object",
													"        pm.expect(responseBody).to.satisfy(function (body) {",
													"            return Array.isArray(body) || (typeof body === 'object' && 'mobiles' in body && 'labels' in body);",
													"        }, 'Response body should be an array or an object with \"mobiles\" and \"labels\" fields.');",
													"",
													"        // If the response is an object, check specific fields",
													"        if (typeof responseBody === 'object' && 'mobiles' in responseBody && 'labels' in responseBody) {",
													"            pm.expect(responseBody.mobiles).to.be.an('array'); // Check if numbers is an array",
													"            pm.expect(responseBody.labels).to.be.an('array'); // Check if labels is an array",
													"            // Add more property checks as needed",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('mobilenumbers').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&mobiles=21312312443345,12312323123&labels=Test,Test2",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "mobiles",
													"value": "21312312443345,12312323123",
													"description": "Comma separated , list of mobile numbers (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "labels",
													"value": "Test,Test2",
													"description": "Comma separated , list of labels (Required). (Regex: /^(,|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)."
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Speakerphone Page",
							"item": [
								{
									"name": "Speakerphone Page set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('extensions').that.is.an('array');",
													"        pm.expect(responseBody.extensions).to.have.length.above(0);",
													"        pm.expect(responseBody).to.have.property('quiet').that.is.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('sppage').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&extensions=422,423&quiet=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "extensions",
													"value": "422,423",
													"description": "Comma separated , list of extensions. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "quiet",
													"value": "0",
													"description": "Quiet mode (1 or 0). (Regex: /^(0|1)$/"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BLF List",
							"item": [
								{
									"name": "BLF List set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('exts').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('labels').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('functions').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('blfs').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('blf_start').that.is.a('number');",
													"        pm.expect(responseBody).to.have.property('blf_cleanup').that.is.a('number');",
													"        pm.expect(responseBody).to.have.property('cart_only').that.is.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('blflist').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&exts=421,423,424&labels=Ext421,&blfs=1,0,1&blf_start=1&blf_cleanup=0&cart_only=0&functions=1,0,1,2,3",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "exts",
													"value": "421,423,424",
													"description": "Comma separated , list of extensions. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "labels",
													"value": "Ext421,",
													"description": "Comma separated , list of labels. (Regex: /^(,|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)"
												},
												{
													"key": "blfs",
													"value": "1,0,1",
													"description": "Comma separated , list of BLFs. (Regex: /^[0-1](,[0-1])+$/)"
												},
												{
													"key": "blf_start",
													"value": "1",
													"description": "BLF start (number, 2 digits max). (Regex: /^\\\\d{1,2}$/"
												},
												{
													"key": "blf_cleanup",
													"value": "0",
													"description": "Clear unused (1 or 0). (Regex: /^[0-1]$/)"
												},
												{
													"key": "cart_only",
													"value": "0",
													"description": "Cart Only (1 or 0). (Regex: /^[0-1]$/"
												},
												{
													"key": "functions",
													"value": "1,0,1,2,3"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Speed Dial",
							"item": [
								{
									"name": "Speed Dial set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('codes').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('names').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"",
													"        // Assuming all arrays have the same length",
													"        var arrayLength = responseBody.codes.length;",
													"",
													"        // Iterate through each item in the arrays",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            pm.test(`Speed Dial Configuration ${i + 1}`, function () {",
													"                pm.expect(responseBody.codes[i]).to.be.a('string');",
													"                pm.expect(responseBody.names[i]).to.be.a('string');",
													"                pm.expect(responseBody.destinations[i]).to.be.a('string');",
													"            });",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('speeddial').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&codes=1,2,99999999&names=Ext451,Ext452,Ext453&destinations=38735450451,38735450452,38735450453",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.edit",
													"description": "Fields destinations, delays and suspends lists must match in size"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "codes",
													"value": "1,2,99999999",
													"description": "Comma separated , list of codes (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "names",
													"value": "Ext451,Ext452,Ext453",
													"description": "Comma separated , list of names (Required). (Regex: /^(,|[\\\\w\\\\s]+)+$/)"
												},
												{
													"key": "destinations",
													"value": "38735450451,38735450452,38735450453",
													"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Recordings",
							"item": [
								{
									"name": "Delete Recordings set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Listen to Recordings",
							"item": [
								{
									"name": "Listen to Recordings set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "System Operation Times",
							"item": [
								{
									"name": "System Operation Times set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Extension Operation Times",
							"item": [
								{
									"name": "Extension Operation Times set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times Configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Define a function to check if a value is a non-empty string",
													"        function isNonEmptyString(value) {",
													"            return typeof value === 'string' && value !== '';",
													"        }",
													"",
													"        // Validate each property based on whether it's expected to be a non-empty string or an array",
													"        pm.expect(responseBody).to.have.property('timeout').that.satisfies((value) => value === '' || isNonEmptyString(value));",
													"        pm.expect(responseBody).to.have.property('dial_opts').that.satisfies((value) => value === '' || isNonEmptyString(value));",
													"        pm.expect(responseBody).to.have.property('sequential').that.satisfies((value) => value === '' || isNonEmptyString(value));",
													"        pm.expect(responseBody).to.have.property('last_dest').that.satisfies((value) => value === '' || isNonEmptyString(value));",
													"",
													"        // Check if destinations, ot_time_from, ot_time_to, and ot_days_array are arrays if they exist",
													"        if ('destinations' in responseBody) {",
													"            pm.expect(responseBody.destinations).to.be.an('array');",
													"        }",
													"",
													"        if ('ot_time_from' in responseBody) {",
													"            pm.expect(responseBody.ot_time_from).to.be.an('array');",
													"        }",
													"",
													"        if ('ot_time_to' in responseBody) {",
													"            pm.expect(responseBody.ot_time_to).to.be.an('array');",
													"        }",
													"",
													"        if ('ot_days_array' in responseBody) {",
													"            pm.expect(responseBody.ot_days_array).to.be.an('array');",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Call Monitoring",
							"item": [
								{
									"name": "Call Monitoring set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callmonitoring.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Monitoring get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callmonitoring.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Monitoring set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callmonitoring.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Monitoring get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callmonitoring.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Wake-up Call",
							"item": [
								{
									"name": "Wake-up Call set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.wakeupcall.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Wake-up Call get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.wakeupcall.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Wake-up Call set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.wakeupcall.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Wake-up Call get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.wakeupcall.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Operator Wake-up Call",
							"item": [
								{
									"name": "Operator Wake-up Call set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.opwakeupcall.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Operator Wake-up Call get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.opwakeupcall.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Operator Wake-up Call set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.opwakeupcall.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Operator Wake-up Call get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.opwakeupcall.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Speakerphone Page Groups",
							"item": [
								{
									"name": "Speakerphone Page Groups set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppagegroups.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page Groups get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppagegroups.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page Groups set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppagegroups.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page Groups get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppagegroups.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SMS Notification",
							"item": [
								{
									"name": "SMS Notifications set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications get",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Listing Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains an array of extensions",
									"    pm.test('Response Validation', function () {",
									"        var extensionKeys = Object.keys(responseBody);",
									"        pm.expect(extensionKeys).to.have.length.above(0);",
									"",
									"        // Store extension IDs in an array",
									"        var extensionIDs = [];",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('linenum').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_location').that.is.a('string');",
									"                    // 'macaddress' and 'department' are optional fields, so we will not perform type checks for them.",
									"                });",
									"",
									"                // Add the new extension ID to the array",
									"                extensionIDs.push(parseInt(extId));",
									"            }",
									"        }",
									"",
									"        // Save the extension IDs to the Postman environment variable",
									"        pm.environment.set('ExtensionIDs', JSON.stringify(extensionIDs));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or tenant ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Fields Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('pin').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_language').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('smuser').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('options').that.is.an('object');",
									"                    pm.expect(extension.options).to.have.property('type').that.is.a('string');",
									"                    pm.expect(extension.options).to.have.property('dtmfmode').that.is.a('string');",
									"                    // Add more checks for other fields in the 'options' object if needed",
									"                    // ...",
									"",
									"                    // 'options_raw', 'ua_autoprov', 'additional_macaddress', 'additional_config', and other fields are optional,",
									"                    // so we will not perform type checks for them.",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.configuration"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension ID of which we want to get configuration."
								},
								{
									"key": "ext",
									"value": "{{name}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extensions Billing (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"           // Validate specific properties for each extension",
									"pm.test('Extension ' + extensionID + ' Data Validation', function () {",
									"    pm.expect(extensionData).to.have.property('splan').that.is.a('string');",
									"    pm.expect(extensionData).to.have.property('slave').that.is.oneOf(['yes', 'no']);",
									"    ",
									"    // Validate master_code: can be null or a number",
									"    pm.expect(extensionData.master_code).to.satisfy((value) => value === null || !isNaN(value));",
									"    ",
									"    // Validate properties after master_code: can be null or specific data types",
									"    pm.expect(extensionData).to.have.property('reminder_balance').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('credit_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('splan_date').that.satisfies(value => value === null || /^\\d{2}-\\d{2}-\\d{4}$/.test(value));",
									"    pm.expect(extensionData).to.have.property('limits').that.satisfies(value => value === null || ['yes', 'no'].includes(value));",
									"    pm.expect(extensionData).to.have.property('limit_type').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('soft_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('hard_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('email').that.satisfies(value => value === null || typeof value === 'string');",
									"    ",
									"});",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing",
									"description": "Extension Billing (deprecated and will be soon replaced with call_rating)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Call Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"           // Validate specific properties for each extension",
									"pm.test('Extension ' + extensionID + ' Data Validation', function () {",
									"    pm.expect(extensionData).to.have.property('splan').that.is.a('string');",
									"    pm.expect(extensionData).to.have.property('slave').that.is.oneOf(['yes', 'no']);",
									"    ",
									"    // Validate master_code: can be null or a number",
									"    pm.expect(extensionData.master_code).to.satisfy((value) => value === null || !isNaN(value));",
									"    ",
									"    // Validate properties after master_code: can be null or specific data types",
									"    pm.expect(extensionData).to.have.property('reminder_balance').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('credit_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('splan_date').that.satisfies(value => value === null || /^\\d{2}-\\d{2}-\\d{4}$/.test(value));",
									"    pm.expect(extensionData).to.have.property('limits').that.satisfies(value => value === null || ['yes', 'no'].includes(value));",
									"    pm.expect(extensionData).to.have.property('limit_type').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('soft_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('hard_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('email').that.satisfies(value => value === null || typeof value === 'string');",
									"    ",
									"});",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating",
									"description": "Extension Billing"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Billing Info (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Billing Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('account_balance').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('available_funds').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('inclusive_minutes').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Account Balance:', extensionData.account_balance);",
									"                console.log('Available Funds:', extensionData.available_funds);",
									"                console.log('Inclusive Minutes:', extensionData.inclusive_minutes);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing_info&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing_info",
									"description": "Extension Billing Info (deprecated and will be soon replaced with call_rating_info)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Call Rating Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Billing Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('account_balance').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('available_funds').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('inclusive_minutes').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Account Balance:', extensionData.account_balance);",
									"                console.log('Available Funds:', extensionData.available_funds);",
									"                console.log('Inclusive Minutes:', extensionData.inclusive_minutes);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_info&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_info",
									"description": "Extension Billing Info."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Slaves",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('name').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('protocol').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ext').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('location').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_id').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_name').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_fullname').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('status').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Name:', extensionData.name);",
									"                console.log('Protocol:', extensionData.protocol);",
									"                console.log('Extension:', extensionData.ext);",
									"                console.log('Location:', extensionData.location);",
									"                console.log('UA ID:', extensionData.ua_id);",
									"                console.log('UA Name:', extensionData.ua_name);",
									"                console.log('UA Fullname:', extensionData.ua_fullname);",
									"                console.log('Status:', extensionData.status);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.slaves&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.slaves"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "IDs from Master Extensions."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number.Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Billing History (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the 'sum' parameter is present in the URL variables",
									"    var sumParam = pm.request.url.query.get('sum');",
									"    if (sumParam === '1') {",
									"        // This is the case where 'sum' parameter is 1",
									"        pm.test('Response Validation for Sum=1', function () {",
									"            pm.expect(responseBody).to.be.an('array');",
									"            ",
									"            // Loop through the response entries",
									"            for (var entry of responseBody) {",
									"                pm.test('Entry Validation', function () {",
									"                    pm.expect(entry).to.have.property('sum_credit').that.is.a('string');",
									"                    pm.expect(entry).to.have.property('sum_debit').that.is.a('string');",
									"                    ",
									"                    // Print the result for each entry",
									"                    console.log('Sum Credit:', entry.sum_credit);",
									"                    console.log('Sum Debit:', entry.sum_debit);",
									"                });",
									"            }",
									"        });",
									"    } else {",
									"        // This is the case where 'sum' parameter is not provided or is 0",
									"        pm.test('Response Validation for Sum=0 or Not Specified', function () {",
									"            if (Array.isArray(responseBody)) {",
									"                // Check if the array is empty",
									"                if (responseBody.length === 0) {",
									"                    console.log(\"You entered data that does not give any results. Please recheck the data you enter and try with different inputs.\");",
									"                } else {",
									"                    // Loop through billing history entries",
									"                    for (var entry of responseBody) {",
									"                        pm.test('Billing History Entry Validation', function () {",
									"                            pm.expect(entry).to.have.property('entry_date').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('refno').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('notes').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('amount').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('type').that.is.a('string');",
									"                            ",
									"                            // Print the result for each billing history entry",
									"                            console.log('Entry Date:', entry.entry_date);",
									"                            console.log('Ref No:', entry.refno);",
									"                            console.log('Notes:', entry.notes);",
									"                            console.log('Amount:', entry.amount);",
									"                            console.log('Type:', entry.type);",
									"                        });",
									"                    }",
									"                }",
									"            } else {",
									"                // Handle other unexpected response structures",
									"                console.log(\"Response structure is not as expected. Please review the response data.\");",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing_history&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&start={{DateStart}}&end={{DateEnd}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing_history",
									"description": "Billing History (deprecated and will be soon replaced with call_rating_history)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "ID of Server or Tenant."
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "ID of extension we want to get info (or for list of IDs use CSV file)"
								},
								{
									"key": "start",
									"value": "{{DateStart}}",
									"description": "Start Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "end",
									"value": "{{DateEnd}}",
									"description": "End Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "starttime",
									"value": "{{StartTime}}",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "endtime",
									"value": "{{EndTime}}",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type (eg: credit|debit)",
									"disabled": true
								},
								{
									"key": "refno",
									"value": "",
									"description": "Reference Number",
									"disabled": true
								},
								{
									"key": "rrefno",
									"value": "",
									"description": "Filtering Reference Number using regular expressions",
									"disabled": true
								},
								{
									"key": "sum",
									"value": "",
									"description": "Summarize amount by type (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching history. (Ex: \"America/New_York\")",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Call Rating History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the 'sum' parameter is present in the URL variables",
									"    var sumParam = pm.request.url.query.get('sum');",
									"    if (sumParam === '1') {",
									"        // This is the case where 'sum' parameter is 1",
									"        pm.test('Response Validation for Sum=1', function () {",
									"            pm.expect(responseBody).to.be.an('array');",
									"            ",
									"            // Loop through the response entries",
									"            for (var entry of responseBody) {",
									"                pm.test('Entry Validation', function () {",
									"                    pm.expect(entry).to.have.property('sum_credit').that.is.a('string');",
									"                    pm.expect(entry).to.have.property('sum_debit').that.is.a('string');",
									"                    ",
									"                    // Print the result for each entry",
									"                    console.log('Sum Credit:', entry.sum_credit);",
									"                    console.log('Sum Debit:', entry.sum_debit);",
									"                });",
									"            }",
									"        });",
									"    } else {",
									"        // This is the case where 'sum' parameter is not provided or is 0",
									"        pm.test('Response Validation for Sum=0 or Not Specified', function () {",
									"            if (Array.isArray(responseBody)) {",
									"                // Check if the array is empty",
									"                if (responseBody.length === 0) {",
									"                    console.log(\"You entered data that does not give any results. Please recheck the data you enter and try with different inputs.\");",
									"                } else {",
									"                    // Loop through billing history entries",
									"                    for (var entry of responseBody) {",
									"                        pm.test('Billing History Entry Validation', function () {",
									"                            pm.expect(entry).to.have.property('entry_date').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('refno').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('notes').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('amount').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('type').that.is.a('string');",
									"                            ",
									"                            // Print the result for each billing history entry",
									"                            console.log('Entry Date:', entry.entry_date);",
									"                            console.log('Ref No:', entry.refno);",
									"                            console.log('Notes:', entry.notes);",
									"                            console.log('Amount:', entry.amount);",
									"                            console.log('Type:', entry.type);",
									"                        });",
									"                    }",
									"                }",
									"            } else {",
									"                // Handle other unexpected response structures",
									"                console.log(\"Response structure is not as expected. Please review the response data.\");",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_history&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&start={{DateStart}}&end={{DateEnd}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_history"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "ID of Server or Tenant."
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "ID of extension we want to get info (or for list of IDs use CSV file)"
								},
								{
									"key": "start",
									"value": "{{DateStart}}",
									"description": "Start Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "end",
									"value": "{{DateEnd}}",
									"description": "End Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "starttime",
									"value": "{{StartTime}}",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "endtime",
									"value": "{{EndTime}}",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type (eg: credit|debit)",
									"disabled": true
								},
								{
									"key": "refno",
									"value": "",
									"description": "Reference Number",
									"disabled": true
								},
								{
									"key": "rrefno",
									"value": "",
									"description": "Filtering Reference Number using regular expressions",
									"disabled": true
								},
								{
									"key": "sum",
									"value": "",
									"description": "Summarize amount by type (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching history. (Ex: \"America/New_York\")",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Additional MAC Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.additional_macs&server={{tenantID}}&id={{ExtensionIDs}}&values&devices&locations&device_addresses",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.additional_macs"
								},
								{
									"key": "server",
									"value": "{{tenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension ID (Required)"
								},
								{
									"key": "values",
									"value": "",
									"description": "List of MAC Addresses separated with , (Required) (Regex: /^\\\\b(?:[0-9A-Fa-f]{12},?)+\\\\b$/)"
								},
								{
									"key": "devices",
									"value": "",
									"description": "List of UAD IDs separated with , (Required) (Regex: /^(,|\\\\d+)+$/)"
								},
								{
									"key": "locations",
									"value": "",
									"description": "List of Locations separated with , (Local=1, Remote=2) (Required)"
								},
								{
									"key": "device_addresses",
									"value": "",
									"description": "List of Device Location IDs separated with ,"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editions&Modules set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.editions_modules.set&server={{tenantID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.editions_modules.set"
								},
								{
									"key": "server",
									"value": "{{tenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension ID (Required)"
								},
								{
									"key": "editions",
									"value": "",
									"description": "List of Editions separated with ,. The following values are accepted: all|none|agent|office|business|operator|supervisor|mobile|web",
									"disabled": true
								},
								{
									"key": "modules",
									"value": "",
									"description": "List of Modules separated with ,. The following values are accepted: all|none|crm|call popup|skype|omni channel|customer survey",
									"disabled": true
								},
								{
									"key": "use_department_templates",
									"value": "",
									"description": "Use Department Templates(1 or 0)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editions&Modules configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('use_department_templates').that.is.a('string');",
									"",
									"        // Validate editions object",
									"        pm.expect(responseBody).to.have.property('editions').that.is.an('object');",
									"        pm.expect(responseBody.editions).to.have.property('all').that.is.a('number');",
									"        pm.expect(responseBody.editions).to.have.property('office').that.is.a('number');",
									"        pm.expect(responseBody.editions).to.have.property('business').that.is.a('number');",
									"        pm.expect(responseBody.editions).to.have.property('web').that.is.a('number');",
									"        pm.expect(responseBody.editions).to.have.property('mobile').that.is.a('number');",
									"",
									"        // Validate modules object",
									"        pm.expect(responseBody).to.have.property('modules').that.is.an('object');",
									"        pm.expect(responseBody.modules).to.have.property('all').that.is.a('number');",
									"        pm.expect(responseBody.modules).to.have.property('call popup').that.is.a('number');",
									"        pm.expect(responseBody.modules).to.have.property('skype').that.is.a('number');",
									"        pm.expect(responseBody.modules).to.have.property('crm').that.is.a('number');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.editions_modules.configuration&server={{tenantID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.editions_modules.configuration"
								},
								{
									"key": "server",
									"value": "{{tenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension ID (Required)"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Extensions\n\nSupported Methods:\n\n`list` - List Extensions\n\n`configuration` - Configuration of specific extension\n\n`add` - Add Extension\n\n`edit` - Edit Extension\n\n`delete` - Delete Extension\n\n`balance` - Credit/Debit Balance\n\n`billing` - Extension Billing (deprecated and will be soon replaced with call_rating)\n\n`billing_info` - Extension Billing Info (deprecated and will be soon replaced with call_rating_info)\n\n`call_rating` - Extension Call Rating\n\n`call_rating_info` - Extension Call Rating Info\n\n`slaves` - Returns all slaves extension for supplied master extension\n\n`billing_history` - Billing History (deprecated and will be soon replaced with call_rating_history)\n\n`call_rating_history` - Call Rating History\n\n`es` - Extension Enhanced Services\n\n`reset_inclusive_minutes` - Reset Inclusive Minutes\n\n`voicemail.delete` - Delete Extension Voicemails\n\n`additional_macs` - Additional MAC Addresses\n\n`editions_modules` - Editions & Modules"
		},
		{
			"name": "Trunks",
			"item": [
				{
					"name": "Adding Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ID:', responseBody.id);",
									"",
									"        // Get the existing TrunkIDs array from the collection variable",
									"        var trunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Push the new ID to the TrunkIDs array",
									"        var id = responseBody.id;",
									"        trunkIDs.push(id);",
									"        console.log('Trunk IDs:', trunkIDs);",
									"",
									"        // Update the TrunkIDs array in the collection variable",
									"        pm.collectionVariables.set('TrunkIDs', trunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name={{TrunkName}}&provider_id={{ProviderID}}&type={{TrunkType}}&dtmfmode={{TrunkDTMFmode}}&status={{TrunkStatus}}&country={{Country}}&national={{NationalCode}}&international={{InternationalCode}}&emerg_trunk={{EmergTrunk}}&host={{TrunkHost}}&username={{TrunkUserName}}&insecure={{TrunkInsecure}}&looserouting={{TrunkLooseRouting}}&incominglimit={{TrunkIncomingLimit}}&outgoinglimit={{TrunkOutgoingLimit}}&busylevel={{TrunkBusyLevel}}&codecs={{TrunkCodecs}}&codecs_ptime={{TrunkCodecsPrimeTime}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{TrunkName}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "{{ProviderID}}",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "{{TrunkType}}",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "{{TrunkDTMFmode}}",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "{{TrunkStatus}}",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "{{EmergTrunk}}",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{TrunkHost}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "{{TrunkUserName}}",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "{{TrunkSecret}}",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "{{TrunkPeerHost}}",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "{{TrunkPeerUserName}}",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "{{TrunkPeerSecret}}",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "{{TrunkInsecure}}",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "{{TrunkLooseRouting}}",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "{{TrunkIncomingLimit}}",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "{{TrunkOutgoingLimit}}",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "{{TrunkBusyLevel}}",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "{{TrunkCodecs}}",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "{{TrunkCodecsPrimeTime}}",
									"description": "Ptime (10, 20, 30 â€¦â€‹ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix_emerg",
									"value": "",
									"description": "Set Prefix for Emergency Calls. Regex: /^(yes|no)$/",
									"disabled": true
								},
								{
									"key": "emerg_location_header",
									"value": null,
									"description": "Emergency Location Header. (Regex: /^[\\\\w\\\\-,]{1,100}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Print the success message and the ID",
									"    console.log('Success:', responseBody.success);",
									"    console.log('ID:', responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.edit&server=1&id={{TrunkIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.edit",
									"description": "Edit trunks"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{TrunkIDs}}",
									"description": "IDs of trunks we want to edit. Use CSV file for list of trunks. (Required)"
								},
								{
									"key": "name",
									"value": "",
									"description": "Full Name. (Regex: /^.+$/).",
									"disabled": true
								},
								{
									"key": "provider_id",
									"value": "",
									"description": "Provider ID (SIP only). (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Trunk type (user, friend, peer)",
									"disabled": true
								},
								{
									"key": "dtmfmode",
									"value": "",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Status (active, not active, suspended)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "",
									"description": "Country code. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "national",
									"value": "",
									"description": "National. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "international",
									"value": "",
									"description": "International . (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "emerg_trunk",
									"value": "",
									"description": "Emergency trunk. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "host",
									"value": "",
									"description": "Host",
									"disabled": true
								},
								{
									"key": "username",
									"value": "",
									"description": "Username",
									"disabled": true
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret.",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "",
									"description": "Insecure (port|invite|port,invite|very)",
									"disabled": true
								},
								{
									"key": "looserouting",
									"value": "",
									"description": "Loose routing (yes|no|1|0)",
									"disabled": true
								},
								{
									"key": "incominglimit",
									"value": "",
									"description": "Incoming limit. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "outgoinglimit",
									"value": "",
									"description": "Outgoing limit. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "Busy level. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "codecs",
									"value": "",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "codecs_ptime",
									"value": "",
									"description": "Ptime (10, 20, 30 â€¦â€‹ 300)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix_emerg",
									"value": "",
									"description": "Set Prefix for Emergency Calls. Regex: /^(yes|no)$/",
									"disabled": true
								},
								{
									"key": "emerg_location_header",
									"value": null,
									"description": "Emergency Location Header. (Regex: /^[\\\\w\\\\-,]{1,100}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"TrunkIDs\");",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Get the existing TrunkIDs array from the collection variable",
									"        var trunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Loop through trunk data",
									"        for (var trunkID in responseBody) {",
									"            var trunkData = responseBody[trunkID];",
									"            ",
									"            // Validate specific properties for each trunk",
									"            pm.test('Trunk ' + trunkID + ' Data Validation', function () {",
									"                pm.expect(trunkData).to.be.an('object');",
									"                pm.expect(trunkData).to.have.property('name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('protocol').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_id').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                ",
									"                // Push the trunk ID to the TrunkIDs array",
									"                trunkIDs.push(trunkID);",
									"                ",
									"                // Print the result for each trunk",
									"                console.log('Trunk ID:', trunkID);",
									"                console.log('Trunk Name:', trunkData.name);",
									"                console.log('Protocol:', trunkData.protocol);",
									"                console.log('Provider ID:', trunkData.provider_id);",
									"                console.log('Provider Name:', trunkData.provider_name);",
									"                console.log('Status:', trunkData.status);",
									"            });",
									"        }",
									"",
									"        // Update the TrunkIDs array in the collection variable",
									"        pm.collectionVariables.set('TrunkIDs', trunkIDs);",
									"        pm.environment.set(\"TrunkIDs\", trunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter trunks by server (does not apply in Tenant Mode)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through provider data",
									"        for (var providerName in responseBody) {",
									"            var providerData = responseBody[providerName];",
									"            ",
									"            // Validate provider data",
									"            pm.test('Provider ' + providerName + ' Data Validation', function () {",
									"                pm.expect(providerData).to.be.an('array');",
									"                pm.expect(providerData[0]).to.be.a('string');",
									"                pm.expect(providerData[1]).to.be.a('string');",
									"                ",
									"                // Print the result for each provider",
									"                console.log('Provider Name:', providerName);",
									"                console.log('Provider ID:', providerData[0]);",
									"                console.log('Provider Type:', providerData[1]);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.providers&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.providers",
									"description": "Listing trunk providers"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trunk Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: No result found for given parameters, check your input again!\");",
									"    pm.test('No Result Found', function () {",
									"        pm.expect.fail(\"No result for given parameters, check your input again!\");",
									"    });",
									"} else {",
									"    // Continue with the rest of the checks",
									"    // Validate the response structure and other fields as needed",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        const objectKey = Object.keys(responseBody)[0];",
									"        const trunkConfiguration = responseBody[objectKey];",
									"",
									"        pm.test('Extension Name Validation', function () {",
									"            pm.expect(trunkConfiguration.name).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Provider ID Validation', function () {",
									"            pm.expect(trunkConfiguration.provider_id).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Provider Name Validation', function () {",
									"            pm.expect(trunkConfiguration.provider_name).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Status Validation', function () {",
									"            pm.expect(trunkConfiguration.status).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Protocol Validation', function () {",
									"            pm.expect(trunkConfiguration.protocol).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Options Validation', function () {",
									"            pm.expect(trunkConfiguration.options).to.be.an('object');",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.configuration&apikey={{API_Key}}&server=1&trunkid={{TrunkIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.configuration"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "server",
									"value": "1",
									"description": "ID of a tenant (Required)"
								},
								{
									"key": "trunkid",
									"value": "{{TrunkIDs}}",
									"description": "ID of a trunk (Required). (Regex: /^[a-zA-Z0-9_-]+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseJson = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseJson) {",
									"    console.error(\"Test Failed: \" + responseJson.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseJson.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseJson).to.be.an('object');",
									"",
									"        // Check if success is a string",
									"        pm.expect(responseJson.success).to.be.a('string');",
									"",
									"        // Check if id is a string",
									"        pm.expect(responseJson.id).to.be.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.delete&apikey={{API_Key}}&id={{TrunkIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.delete"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "id",
									"value": "{{TrunkIDs}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Trunks\n\nSupported Methods:\n\n`list` - List Trunks\n\n`configuration` - Trunk Configuration\n\n`add` - Add new Trunk\n\n`edit` - Edit existing Trunk\n\n`providers` - List Trunk Providers"
		},
		{
			"name": "SMS",
			"item": [
				{
					"name": "SMS Trunks",
					"item": [
						{
							"name": "Adding SMS trunks",
							"item": [
								{
									"name": "Telnyx",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&api_key={{TelnyxAPI}}&public_key={{TelnyxPublicKey}}&messaging_profile_id={{TelnyxProfileID}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add",
															"description": "For adding more trunks use CSV file TelnyxSMSTrunk.csv"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "{{TelnyxAPI}}",
															"description": "Telnyx API Key (Required for Telnyx)"
														},
														{
															"key": "public_key",
															"value": "{{TelnyxPublicKey}}",
															"description": "Telnyx Public Key (Required for Telnyx)"
														},
														{
															"key": "messaging_profile_id",
															"value": "{{TelnyxProfileID}}",
															"description": "Telnyx Messaging Profile ID (Required for Telnyx)"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Telnyx SMS provider"
								},
								{
									"name": "Bandwith",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&username={{BandwithUserName}}&password={{BandwithPassword}}&user_id={{BandwithUserID}}&app_id={{BandwithAppID}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "username",
															"value": "{{BandwithUserName}}",
															"description": "Bandwidth Username (Required for Bandwidth)"
														},
														{
															"key": "password",
															"value": "{{BandwithPassword}}",
															"description": "Bandwidth Password (Required for Bandwidth)"
														},
														{
															"key": "user_id",
															"value": "{{BandwithUserID}}",
															"description": "Bandwidth User ID (Required for Bandwidth)"
														},
														{
															"key": "app_id",
															"value": "{{BandwithAppID}}",
															"description": "Bandwidth APP ID (Required for Bandwidth)"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Bandwith SMS provider"
								},
								{
									"name": "Twilio",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&account_sid={{TwilioAccSID}}&auth_token={{TwilioAuthToken}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": null,
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "account_sid",
															"value": "{{TwilioAccSID}}",
															"description": "Twilio Account SID (Required for Twilio)"
														},
														{
															"key": "auth_token",
															"value": "{{TwilioAuthToken}}",
															"description": "Twilio authorization token (Required for Twilio)"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Twilio SMS provider"
								},
								{
									"name": "Voip Innovations",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&secret={{VoipSecret}}&login={{VoipLogin}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": null,
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "secret",
															"value": "{{VoipSecret}}",
															"description": "Voip Innovations secret (Required for Voip Innovations)"
														},
														{
															"key": "login",
															"value": "{{VoipLogin}}",
															"description": "Voip Innovations login (Required for Voip Innovations)"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Voip Innovations SMS provider"
								},
								{
									"name": "OZ SMS",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&api_key={{OzAPI}}&username={{OzUserName}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "{{OzAPI}}",
															"description": "OZ SMS Api Key"
														},
														{
															"key": "username",
															"value": "{{OzUserName}}",
															"description": "OZ SMS username"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Editing SMS trunks",
							"item": [
								{
									"name": "Telnyx",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit",
															"description": "For editing more trunks use CSV file SMSTrunkIDs.csv"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "SMS Trunk ID (use csv file SMSTrunkIDs.csv)"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "",
															"description": "Telnyx API Key (Required for Telnyx)",
															"disabled": true
														},
														{
															"key": "public_key",
															"value": "",
															"description": "Telnyx Public Key (Required for Telnyx)",
															"disabled": true
														},
														{
															"key": "messaging_profile_id",
															"value": "",
															"description": "Telnyx Messaging Profile ID (Required for Telnyx)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Telnyx SMS provider"
								},
								{
									"name": "Bandwith",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Bandwith Trunks at once (SMSTrunkIDs.csv)"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "username",
															"value": "",
															"description": "Bandwidth Username (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "password",
															"value": "",
															"description": "Bandwidth Password (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "user_id",
															"value": "",
															"description": "Bandwidth User ID (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "app_id",
															"value": "",
															"description": "Bandwidth APP ID (Required for Bandwidth)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Bandwith SMS provider"
								},
								{
									"name": "Twilio",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Twilio trunks at once (SMSTrunkIDs.csv)"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "account_sid",
															"value": "",
															"description": "Twilio Account SID (Required for Twilio)",
															"disabled": true
														},
														{
															"key": "auth_token",
															"value": "",
															"description": "Twilio authorization token (Required for Twilio)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Twilio SMS provider"
								},
								{
									"name": "Voip Innovations",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Twilio trunks at once (SMSTrunkIDs.csv)"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "secret",
															"value": "",
															"description": "Voip Innovations secret (Required for Voip Innovations)",
															"disabled": true
														},
														{
															"key": "login",
															"value": "",
															"description": "Voip Innovations login (Required for Voip Innovations)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Voip Innovations SMS provider"
								},
								{
									"name": "OZ SMS",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Oz SMS trunks at once (SMSTrunkIDs.csv)"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "",
															"description": "OZ SMS Api Key",
															"disabled": true
														},
														{
															"key": "username",
															"value": "",
															"description": "OZ SMS username",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "SMS Trunks List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        ",
											"        // Initialize an array to store SMS trunk IDs",
											"        var smsTrunkIDs = [];",
											"        ",
											"        // Loop through SMS trunk data",
											"        for (var trunkID in responseBody) {",
											"            var trunkData = responseBody[trunkID];",
											"            ",
											"            // Validate specific properties for each SMS trunk",
											"            pm.test('SMS Trunk ' + trunkID + ' Data Validation', function () {",
											"                pm.expect(trunkData).to.be.an('object');",
											"                pm.expect(trunkData).to.have.property('name').that.is.a('string');",
											"                pm.expect(trunkData).to.have.property('provider').that.is.a('string');",
											"                ",
											"                // Print the result for each SMS trunk",
											"                console.log('Trunk ID:', trunkID);",
											"                console.log('SMS Trunk Name:', trunkData.name);",
											"                console.log('SMS Provider:', trunkData.provider);",
											"                ",
											"                // Push the SMS trunk ID to the array",
											"                smsTrunkIDs.push(trunkID);",
											"            });",
											"        }",
											"        ",
											"        // Set the SMS trunk IDs array to collection and environment variables",
											"        pm.collectionVariables.set('SMSTrunkIDs', smsTrunkIDs);",
											"        pm.environment.set('SMSTrunkIDs', smsTrunkIDs);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.list"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SMS Trunk Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
											"        pm.expect(responseBody).to.have.property('enabled').that.is.a('number');",
											"        pm.expect(responseBody).to.have.property('name').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('provider').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('description').that.is.a('string');",
											"",
											"        // Commented out validation for provider-specific fields",
											"        /*",
											"        if (responseBody.provider === 'telnyx') {",
											"            pm.expect(responseBody).to.have.property('api_key').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('public_key').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('messaging_profile_id').that.is.a('string');",
											"        } else {",
											"            // Add validation for other providers if needed",
											"        }",
											"        */",
											"",
											"        // Print the result for the SMS trunk configuration",
											"        console.log('SMS Trunk ID:', responseBody.id);",
											"        console.log('Enabled:', responseBody.enabled);",
											"        console.log('SMS Trunk Name:', responseBody.name);",
											"        console.log('SMS Trunk Provider:', responseBody.provider);",
											"        console.log('Description:', responseBody.description);",
											"",
											"        // Commented out printing of provider-specific fields",
											"        /*",
											"        if (responseBody.provider === 'telnyx') {",
											"            console.log('API Key:', responseBody.api_key);",
											"            console.log('Public Key:', responseBody.public_key);",
											"            console.log('Messaging Profile ID:', responseBody.messaging_profile_id);",
											"        }",
											"        */",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.configuration&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.configuration",
											"description": "Configuration of specific SMS Trunk"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "If we want configurations of all trunks, we should use CSV file with list of all SMSM trunks IDs."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting SMS Trunks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Successful Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.delete&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.delete"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "ID of trunk we want to delete. (Use SMSTrunkIDs.csv if want to delete more trunks at once)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SMS Trunks&Tenants",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Loop through tenant SMS trunk data",
											"        for (var tenantID in responseBody) {",
											"            var tenantData = responseBody[tenantID];",
											"",
											"            // Validate specific properties for each tenant SMS trunk",
											"            pm.test('Tenant ' + tenantID + ' SMS Trunk Data Validation', function () {",
											"                pm.expect(tenantData).to.be.an('object');",
											"",
											"                // Print the result for each tenant SMS trunk",
											"                console.log('Tenant ID:', tenantID);",
											"                console.log('ID:', tenantData.id);",
											"                console.log('Enabled:', tenantData.enabled);",
											"                console.log('Name:', tenantData.name);",
											"                console.log('Provider:', tenantData.provider);",
											"            });",
											"        }",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.list",
											"description": "List SMS Trunks per Tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tenants SMS trunk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Validate specific properties for the SMS trunk tenant",
											"        pm.test('SMS Trunk per Tenant Data Validation', function () {",
											"            pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('enabled').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('name').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('provider').that.is.a('string');",
											"        });",
											"",
											"        // Print the result for the SMS trunk tenant",
											"        console.log('Tenant ID:', responseBody.id);",
											"        console.log('Enabled:', responseBody.enabled);",
											"        console.log('Name:', responseBody.name);",
											"        console.log('Provider:', responseBody.provider);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.get&tenant={{Srv/Tenant-ID}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.get"
										},
										{
											"key": "tenant",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID (Required) (Use SrvTenantIDs.csv file to get trunks of more tenants at once)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Tenants SMS trunk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the successful response",
											"    pm.test('Successful Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.set&tenant={{Srv/Tenant-ID}}&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.set"
										},
										{
											"key": "tenant",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID (Required)"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "SMS Trunk ID. (Use CSV file SMSTrunk&TenantIDs.csv for setting list of trunks)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SMS reports list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: There is no reports for selected Date/Time range!\");",
									"    pm.test('No Reports Found', function () {",
									"        pm.expect.fail(\"There is no reports for selected Date/Time range!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each SMS report entry",
									"        for (var reportId in responseBody) {",
									"            var smsReport = responseBody[reportId];",
									"",
									"            pm.test('SMS Report ' + reportId + ' Validation', function () {",
									"                pm.expect(smsReport).to.be.an('object');",
									"                pm.expect(smsReport).to.have.property('server').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('provider').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('from').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('to').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('direction').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('date/time').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('status').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('error').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('type').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.reports.list&start_date=Oct-19-2023&end_date=Oct-19-2023",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.sms.reports.list"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "09:25:00",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "end_time",
									"value": "09:26:00",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "Outbound",
									"description": "Direction. Filter by two available directions (Inbound, Outbound)",
									"disabled": true
								},
								{
									"key": "from_number",
									"value": "",
									"description": "From Filter by number from which SMS was sent. (Regex: /^\\\\d{1,16}$/)",
									"disabled": true
								},
								{
									"key": "to_number",
									"value": "",
									"description": "To. Filter by number to which SMS was sent. (Regex: /^\\\\d{1,16}$/)",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type - Filter by two available types (SMS, MMS). (Regex: /^(?i)(SMS|MMS)$/)",
									"disabled": true
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID. Filter by Server ID",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk SMS reports list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: There are no bulk SMS reports for the selected Date/Time range!\");",
									"    pm.test('No Bulk SMS Reports Found', function () {",
									"        pm.expect.fail(\"There are no bulk SMS reports for the selected Date/Time range!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each bulk SMS report entry",
									"        for (var reportId in responseBody) {",
									"            var bulkSMSReport = responseBody[reportId];",
									"",
									"            pm.test('Bulk SMS Report ' + reportId + ' Validation', function () {",
									"                pm.expect(bulkSMSReport).to.be.an('object');",
									"                pm.expect(bulkSMSReport).to.have.property('name').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('sent').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('failed').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('time_start').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('time_end').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('from').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('csv_file').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('status').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('message').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.reports.bulk_list&start_date=Oct-19-2023&end_date=Oct-19-2023&start_time=09:21:00&end_time=09:26:00",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.sms.reports.bulk_list"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "09:21:00",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)"
								},
								{
									"key": "end_time",
									"value": "09:26:00",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)"
								},
								{
									"key": "status",
									"value": "Completed",
									"description": "Status-Filter by available statuses (Active, Paused, Stopped, Completed). (Regex: /^(?i)(Active|Paused|Stopped|Completed)$/)",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"description": "Name-Filter by name of campaign. (Regex: /^.{1,100}$/)",
									"disabled": true
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID. Filter by Server ID",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# SMS\n\nSupported Methods:\n\n`reports`\\- SMS and Bulk SMS reports\n\n`trunks` - SMS Trunks management\n\n`trunks.tenants` - SMS Trunks & Tenants management\n\n# SMS and Bulk SMS reports\n\nSupported Methods:  \n`list` - List SMS\n\n`bulk_list` - List Bulk SMS\n\n# SMS Trunks\n\nSupported Methods:\n\n`list` - List SMS Trunks\n\n`configuration` - Configuration of specific SMS Trunk\n\n`add` - Add SMS Trunk\n\n`edit` - Edit SMS Trunk\n\n`delete` - Delete SMS Trunk\n\n# SMS Trunks & Tenants\n\nSupported Methods:\n\n`list` - List SMS Trunks & Tenants\n\n`get` - Get Tenantâ€™s SMS Trunk\n\n`set` - Set Tenantâ€™s SMS Trunk"
		},
		{
			"name": "DIDs",
			"item": [
				{
					"name": "Listing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"DID-IDs\");",
									"pm.collectionVariables.unset(\"DID-IDs\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"No DID found. Try with different values for Server or Ext field!\");",
									"        pm.test('No found error', function () {",
									"            pm.expect.fail(\"No DID found for given inputs.Try with different values for Server or Ext field!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure and loop through DIDs data",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DIDs array from the environment",
									"            var didIDs = pm.collectionVariables.get('DID-IDs') || [];",
									"            ",
									"            for (var didID in responseBody) {",
									"                var didData = responseBody[didID];",
									"                ",
									"                // Validate specific properties for each DID",
									"                pm.test('DID ' + didID + ' Data Validation', function () {",
									"                    pm.expect(didData).to.be.an('object');",
									"                    pm.expect(didData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('number2').that.is.oneOf([null, 'string']);",
									"                    pm.expect(didData).to.have.property('server').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('trunk').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('type').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                    pm.expect(didData).to.have.property('sms_enabled').that.is.oneOf([null,'1', '0']);",
									"",
									"                    // Validate e164 field",
									"                    if (didData.e164 !== null) {",
									"                        pm.expect(didData.e164).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"",
									"                     // Validate e164_2 field",
									"                     if (didData.e164_2 !== null) {",
									"                        pm.expect(didData.e164_2).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"                    ",
									"                    // Print the result for each DID",
									"                    console.log('DID ID:', didID);",
									"                    console.log('DID Number:', didData.number);",
									"                    console.log('DID Number2:', didData.number2);",
									"                    console.log('Server ID:', didData.server);",
									"                    console.log('Trunk ID:', didData.trunk);",
									"                    console.log('DID Type:', didData.type);",
									"                    console.log('Extension:', didData.ext);",
									"                    console.log('E.164 Number:', didData.e164);",
									"                    console.log('E.164 Number2:', didData.e164_2);",
									"                    console.log('Status:', didData.status);",
									"                    console.log('SMS Enabled:', didData.sms_enabled);",
									"                    console.log();",
									"",
									"                    // Push the new DID ID to the DIDs array",
									"                    didIDs.push(didID);",
									"                });",
									"            }",
									"            // Update the DIDs array in the environment",
									"            pm.collectionVariables.set('DID-IDs', didIDs);",
									"            pm.environment.set('DID-IDs', didIDs);",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.list",
									"description": "Listing of DIDs, by default, will include all DIDs."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter DID list by Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used. You can use CSV file \"SrvTenantIDs.csv\" to get all DIDs of tenants."
								},
								{
									"key": "ext",
									"value": "",
									"description": "Filter DID list by Destination Number. (Regex: /^[\\\\d,]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        // Print the result for each DID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID ID:', responseBody.id);",
									"        ",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://10.1.165.94/index.php?apikey={{API_Key}}&action=pbxware.did.add&server={{Srv/Tenant-ID}}&trunk={{TrunkIDs}}&did={{DID}}&dest_type={{DestType}}&destination={{Destination}}&disabled={{DID-Disabled}}&e164={{DID}}",
							"protocol": "http",
							"host": [
								"10",
								"1",
								"165",
								"94"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "{{TrunkIDs}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "did",
									"value": "{{DID}}",
									"description": "Actual DID number. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot"
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "{{DID-Disabled}}",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "{{DID}}",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "preserve_callerid",
									"value": "",
									"description": "Preserve Orginal Caller ID. (Regex: /^(1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the result for each edited DID",
									"        console.log('Edited DID ID:', responseBody.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.edit&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.edit",
									"description": "If want to edit more DID in one move use CSV file Add&EditDIDs.csv. In CSV file just populate field for Srv/Tenant-ID and DID-IDs."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required)"
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Trunk ID to which DID is mapped. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "did",
									"value": "",
									"description": "Actual DID number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "",
									"description": "Destination Type for DID. (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "",
									"description": "DID destination. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "disabled",
									"value": "",
									"description": "Disable DID by default.  1: Disabled  0: Enabled",
									"disabled": true
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end). (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "preserve_callerid",
									"value": "",
									"description": "Preserve Orginal Caller ID. (Regex: /^(1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.add&id={{DID-IDs}}&server={{Srv/Tenant-ID}}&callerid={{CallerID}}&dest_type={{DestType}}&destination={{Destination}}&matchexplicitly={{MatchEx}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.edit&id={{DID-IDs}}&server={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.edit",
									"description": "Editing CLI Routing. Arguments are identical to the ones in Adding CLI Routing section. If need to edit multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID. (Regex: /^\\\\d+$/).",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value",
									"disabled": true
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if \"success\" field is an empty array",
									"if (Array.isArray(responseBody.success) && responseBody.success.length === 0) {",
									"    console.error(\"Test Failed: There is no CLI routing created for selected DID!\");",
									"    pm.test('No CLI Routing Found', function () {",
									"        pm.expect.fail(\"There is no CLI routing created for selected DID!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each CLI routing entry",
									"        for (var cliroutingId in responseBody.success) {",
									"            var clirouting = responseBody.success[cliroutingId];",
									"            pm.expect(clirouting).to.be.an('object');",
									"",
									"            pm.test(`CLI Routing ${cliroutingId} Validation`, function () {",
									"                pm.expect(clirouting).to.have.property('callerid').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('ext').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('type').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('matchtype').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.list&id={{DID-IDs}}&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.list"
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletenig CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.delete&id={{DID-IDs}}&server={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# DIDs\n\nSupported Methods:\n\n`list` - List DIDs\n\n`add` - Add new DID\n\n`edit` - Edit existing DID\n\n`delete` - Delete existing DID\n\n`clirouting.add` - Add CLI Routing\n\n`clirouting.edit` - Edit CLI Routing\n\n`clirouting.list` - List CLI Routing\n\n`clirouting.delete` - Delete CLI Routing"
		},
		{
			"name": "DID Groups",
			"item": [
				{
					"name": "Listing DID groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"DIDGroupID\");",
									"pm.environment.unset(\"DIDGroupID\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"There is no DID groups to show!\");",
									"        pm.test('No DID Groups Found', function () {",
									"            pm.expect.fail(\"No DID groups found\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DID group IDs array from the environment",
									"            var didGroupIDs = pm.collectionVariables.get('DIDGroupID') || [];",
									"",
									"            // Loop through DID group data",
									"            for (var groupID in responseBody) {",
									"                var groupData = responseBody[groupID];",
									"",
									"                // Save the group ID to the DID group IDs array",
									"                didGroupIDs.push(groupID);",
									"",
									"                // Validate specific properties for each DID group",
									"                pm.test('DID Group ' + groupID + ' Data Validation', function () {",
									"                    pm.expect(groupData).to.be.an('object');",
									"                    pm.expect(groupData).to.have.property('group_name').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('max_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('min_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('tenant').that.is.a('string');",
									"",
									"                    // Print the result for each DID group",
									"                    console.log('Group ID:', groupID);",
									"                    console.log('Group Name:', groupData.group_name);",
									"                    console.log('Max DID:', groupData.max_did);",
									"                    console.log('Min DID:', groupData.min_did);",
									"                    console.log('Tenant:', groupData.tenant);",
									"                });",
									"            }",
									"",
									"            // Update the DID group IDs array in the environment",
									"            pm.collectionVariables.set('DIDGroupID', didGroupIDs);",
									"            pm.environment.set('DIDGroupID', didGroupIDs);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.list",
									"description": "Listing of DID groups, by default, will include all DID groups."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID Group ID:', responseBody.id);",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.add&server=1&group_name={{DIDGroupName}}&tenantid={{Srv/Tenant-ID}}&min_did={{DIDMin}}&max_did={{DIDMax}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.add",
									"description": "For Add few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1. (Required)"
								},
								{
									"key": "group_name",
									"value": "{{DIDGroupName}}",
									"description": "DID Group Name (Required). (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID that DID group is mapped to. (Required). (Regex: /^\\d+$/)"
								},
								{
									"key": "min_did",
									"value": "{{DIDMin}}",
									"description": "DID Group range start (Required) (Regex: /^\\d+$/)"
								},
								{
									"key": "max_did",
									"value": "{{DIDMax}}",
									"description": "DID Group range end (Required) (Regex: /^\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.edit&server=1&id={{DIDGroupID}}&group_name=",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.edit",
									"description": "For Editing few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								},
								{
									"key": "group_name",
									"value": "",
									"description": "DID Group Name. (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "",
									"description": "Tenant ID that DID group is mapped to. (Regex: /^\\d+$/)",
									"disabled": true
								},
								{
									"key": "min_did",
									"value": "",
									"description": "DID Group range start. (Regex: /^\\d+$/)",
									"disabled": true
								},
								{
									"key": "max_did",
									"value": "",
									"description": "DID Group range end. (Regex: /^\\d+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Success Message Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.delete&server=1&id={{DIDGroupID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.delete",
									"description": "For Deleting few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# DID Groups\n\nSupported Methods:\n\n`list` - List DID Groups\n\n`add` - Add new DID Group\n\n`edit` - Edit existing DID Group\n\n`delete` - Delete existing DID Group"
		},
		{
			"name": "IVRs",
			"item": [
				{
					"name": "Listing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There are no IVRs to show!\");",
									"    pm.test('Empty Response Validation', function () {",
									"        pm.expect.fail(\"There are no IVRs to show!\");",
									"    });",
									"} else {",
									"    // Get the existing IVR IDs array from the environment",
									"    var ivrIDs = pm.collectionVariables.get('IVR-ID') || [];",
									"    ",
									"    // Loop through IVR data",
									"    for (var ivrID in responseBody) {",
									"        var ivrData = responseBody[ivrID];",
									"        ",
									"        // Validate specific properties for each IVR",
									"        pm.test('IVR ' + ivrID + ' Data Validation', function () {",
									"            pm.expect(ivrData).to.be.an('object');",
									"            pm.expect(ivrData).to.have.property('name').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('type').that.is.oneOf(['0', '1', '2']);",
									"            pm.expect(ivrData).to.have.property('ext').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('keymap').that.is.an('object');",
									"            pm.expect(ivrData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"            pm.expect(ivrData).to.have.property('operator').that.is.oneOf([null, 'string']);",
									"            ",
									"            // Print the result for each IVR",
									"            console.log('IVR ID:', ivrID);",
									"            console.log('IVR Name:', ivrData.name);",
									"            console.log('IVR Type:', ivrData.type);",
									"            console.log('IVR Extension:', ivrData.ext);",
									"            console.log('IVR Keymap Type:', ivrData.keymap.type);",
									"            console.log('IVR Keymap Value:', ivrData.keymap.value);",
									"            console.log('IVR Status:', ivrData.status);",
									"            console.log('IVR Operator:', ivrData.operator);",
									"            ",
									"            // Push the IVR ID to the IVR IDs array",
									"            ivrIDs.push(ivrID);",
									"        });",
									"    }",
									"    ",
									"    // Update the IVR IDs array in the environment",
									"    pm.collectionVariables.set('IVR-ID', ivrIDs);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.list",
									"description": "Listing of IVRs, by default, will include all IVRs. If you wish to filter by server/tenant, you have to specify correct server argument. List of Tenant IDs, you can fetch from tenant object."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter IVR list by Server/Tenant ID If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.add&server={{Srv/Tenant-ID}}&name={{IVRName}}&ext={{IVRNum}}&greeting={{IVRGreet}}&status={{IVRStatus}}&keymap[1][type]={{Key1Type}}&keymap[1][destination]={{Key1Dest}}&keymap[2][type]={{Key2Type}}&keymap[2][destination]={{Key2Dest}}&keymap[3][type]={{Key3Type}}&keymap[3][destination]={{Key3Dest}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.add",
									"description": "To add multiple IVRs use IVRs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{IVRName}}",
									"description": "IVR name. (Required). No spaces are allowed at the moment."
								},
								{
									"key": "ext",
									"value": "{{IVRNum}}",
									"description": "IVR extension number. (Required)"
								},
								{
									"key": "greeting",
									"value": "{{IVRGreet}}",
									"description": "IVR Greeting (Required). All greetings must begin with greeting-."
								},
								{
									"key": "status",
									"value": "{{IVRStatus}}",
									"description": "IVR status  1: Enabled   0: Disabled"
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only)",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4.",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds)",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1.",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1.",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3.",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "{{Key0Type}}",
									"description": "An array of IVR keymaps (At least one keymap is required)\nThis argument is to be sent as keymap[key][field]=value\nSupported keys:\n   0-9\n   \\*\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail\n   rg: Dial Groups and ERGs\n   aatree: IVR tree\nExample:  keymap[\\*][type]=aa&keymap[\\*][destination]=103\n",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "{{Key0Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "{{Key1Type}}"
								},
								{
									"key": "keymap[1][destination]",
									"value": "{{Key1Dest}}"
								},
								{
									"key": "keymap[2][type]",
									"value": "{{Key2Type}}"
								},
								{
									"key": "keymap[2][destination]",
									"value": "{{Key2Dest}}"
								},
								{
									"key": "keymap[3][type]",
									"value": "{{Key3Type}}"
								},
								{
									"key": "keymap[3][destination]",
									"value": "{{Key3Dest}}"
								},
								{
									"key": "keymap[4][type]",
									"value": "{{Key4Type}}",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "{{Key4Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "{{Key5Type}}",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "{{Key5Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "{{Key6Type}}",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "{{Key6Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "{{Key7Type}}",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "{{Key7Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "{{Key8Type}}",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "{{Key8Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "{{Key9Type}}",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "{{Key9Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][type]",
									"value": "{{Key*Type}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][destination]",
									"value": "{{Key*Dest}}",
									"disabled": true
								},
								{
									"key": "skip_invalid_selection",
									"value": "",
									"description": "1 - Enabled, 0 - Disabled",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.edit&server={{Srv/Tenant-ID}}&id={{IVRsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.edit",
									"description": "To edit multiple IVRs use IVRs.csv file, and populate column IVRsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{IVRsID}}",
									"description": "IVRs ID. (Required)"
								},
								{
									"key": "name",
									"value": "",
									"description": "IVR name. No spaces are allowed at the moment. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "IVR extension number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "IVR Greeting. All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "IVR status  1: Enabled   0: Disabled",
									"disabled": true
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only). Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds). (Regex: /^\\\\d{1,3}$/). Default is 1",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3. (Regex: /^([1-9]|1[0-9]|20)$/)",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "",
									"description": "Array of IVR keymaps. This argument is to be sent as keymap[key][field]=value\nSupported keys: \"0-9\" and  \"\\*\"\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail\n   rg: Dial Groups and ERGs",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[1][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[2][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[2][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[3][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[3][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[4][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[/*][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[/*][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "skip_invalid_selection",
									"value": "",
									"description": "1 - Enabled, 0 - Disabled",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.delete&server={{Srv/Tenant-ID}}&id={{IVRsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.delete",
									"description": "Use CSV IVRs.csv file for deleting more IVRs in one move. Populate Srv/Tenant-ID and IVRsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{IVRsID}}",
									"description": "IVRs ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# IVRs\n\nSupported Methods:\n\n`list` - List IVRs\n\n`add` - Add new IVR\n\n`edit` - Edit existing IVR\n\n`delete` - Delete existing IVR"
		},
		{
			"name": "Ring Groups",
			"item": [
				{
					"name": "Listing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There is no Ring Groups for this Server/Tenant!\");",
									"    pm.test('No Ring Groups!', function () {",
									"        pm.expect.fail(\"No Ring Groups for this Server/Tenant!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Initialize array to store Ring Group IDs",
									"        var rgIDs = [];",
									"        ",
									"        // Loop through Ring Group data",
									"        for (var ringGroupID in responseBody) {",
									"            var ringGroupData = responseBody[ringGroupID];",
									"            ",
									"            // Validate specific properties for each Ring Group",
									"            pm.test('Ring Group ' + ringGroupID + ' Data Validation', function () {",
									"                pm.expect(ringGroupData).to.be.an('object');",
									"                pm.expect(ringGroupData).to.have.property('name').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('ext').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('destinations').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest_vm').that.is.oneOf(['yes', 'no']);",
									"                ",
									"                // Print the result for each Ring Group",
									"                console.log('Ring Group ID:', ringGroupID);",
									"                console.log('Ring Group Name:', ringGroupData.name);",
									"                console.log('Ring Group Extension:', ringGroupData.ext);",
									"                console.log('Ring Group Destinations:', ringGroupData.destinations);",
									"                console.log('Ring Group Last Destination:', ringGroupData.last_dest);",
									"                console.log('Ring Group Last Destination is Voicemail:', ringGroupData.last_dest_vm);",
									"                ",
									"                // Push the Ring Group ID to the array",
									"                rgIDs.push(ringGroupID);",
									"            });",
									"        }",
									"        ",
									"        // Save the Ring Group IDs to variables",
									"        pm.collectionVariables.set('RGsID', rgIDs);",
									"        pm.environment.set('RGsID', rgIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter Ring Group list by Server/Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Ring Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.add&server={{Srv/Tenant-ID}}&name={{RGName}}&ext={{RGNum}}&extensions={{RGExt}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.add",
									"description": "To add multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{RGName}}",
									"description": "Ring Group name. (Required)"
								},
								{
									"key": "ext",
									"value": "{{RGNum}}",
									"description": "Ring Group extension. (Required)"
								},
								{
									"key": "extensions",
									"value": "{{RGExt}}",
									"description": "List of all ring group extensions separated by ,"
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": "",
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "looping_mode",
									"value": "",
									"description": "Looping Mode. List of available modes: per_ext (Default), circular",
									"disabled": true
								},
								{
									"key": "skip_pbd_local",
									"value": "",
									"description": "Local destinations PBD skip (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "preserve_callerid",
									"value": "",
									"description": "Use original Caller ID for external calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "member_es_disable",
									"value": "",
									"description": "Disable Member Enhanced Services (Specify yes or no)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Successfully edited Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Ring Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.edit&server={{Srv/Tenant-ID}}&id={{RGsID}}&name={{RGName}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.edit",
									"description": "To edit multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{RGsID}}",
									"description": "Ring Group ID. (Required)"
								},
								{
									"key": "name",
									"value": "{{RGName}}",
									"description": "Ring Group name."
								},
								{
									"key": "ext",
									"value": "{{RGNum}}",
									"description": "Ring Group extension.",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "{{RGExt}}",
									"description": "List of all ring group extensions separated by ,",
									"disabled": true
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": "",
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "looping_mode",
									"value": "",
									"description": "Looping Mode. List of available modes: per_ext (Default), circular.",
									"disabled": true
								},
								{
									"key": "skip_pbd_local",
									"value": "",
									"description": "Local destinations PBD skip (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "preserve_callerid",
									"value": "",
									"description": "Use original Caller ID for external calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "member_es_disable",
									"value": "",
									"description": "Disable Member Enhanced Services (Specify yes or no)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Configuration Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each ring group in the response",
									"        for (var ringGroupId in responseBody) {",
									"            if (responseBody.hasOwnProperty(ringGroupId)) {",
									"                var ringGroup = responseBody[ringGroupId];",
									"",
									"                pm.test('Ring Group ID ' + ringGroupId + ' Configuration Validation', function () {",
									"                    pm.expect(ringGroup).to.have.property('name').that.is.a('string');",
									"                    pm.expect(ringGroup).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(ringGroup).to.have.property('destinations').that.is.a('string');",
									"                    ",
									"                    pm.expect(ringGroup).to.have.property('options').that.is.an('object');",
									"                    var options = ringGroup.options;",
									"                    pm.expect(options).to.have.property('timeout').that.is.a('string');",
									"                    pm.expect(options).to.have.property('last_dest').that.is.a('string');",
									"                    pm.expect(options).to.have.property('greeting').that.is.a('string');",
									"                    pm.expect(options).to.have.property('loops').that.is.a('string');",
									"                    pm.expect(options).to.have.property('exit_digit').that.is.a('string');",
									"                    pm.expect(options).to.have.property('exit_ext').that.is.a('string');",
									"                    pm.expect(options).to.have.property('record').that.is.a('string');",
									"                    pm.expect(options).to.have.property('record_silent').that.is.a('string');",
									"                    pm.expect(options).to.have.property('ganswer').that.is.a('string');",
									"                    pm.expect(options).to.have.property('max_limit').that.is.a('string');",
									"                    pm.expect(options).to.have.property('store_cdr').that.is.a('string');",
									"                    pm.expect(options).to.have.property('overwrite_timeout').that.is.a('string');",
									"                    pm.expect(options).to.have.property('call_rating_ext').that.is.a('string');",
									"                    pm.expect(options).to.have.property('looping_mode').that.is.a('string');",
									"                    pm.expect(options).to.have.property('skip_pbd_local').that.is.a('string');",
									"                    pm.expect(options).to.have.property('preserve_callerid').that.is.a('string');",
									"                    pm.expect(options).to.have.property('member_es_disable').that.is.a('string');",
									"                    pm.expect(options).to.have.property('last_dest_vm').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_calls').that.is.a('string');",
									"                    pm.expect(options).to.have.property('timeout_msg').that.is.a('string');",
									"                    pm.expect(options).to.have.property('dial_options').that.is.a('string');",
									"                    pm.expect(options).to.have.property('ring_strategy').that.is.a('string');",
									"                    pm.expect(options).to.have.property('custom_ringtone').that.is.a('string');",
									"                    pm.expect(options).to.have.property('callerid').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_msg').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_answered_msg').that.is.a('string');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.configuration&server={{Srv/Tenant-ID}}&id={{ERGsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.configuration"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Required). If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "Ring Group ID. (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Successfully deleted Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.delete&server={{Srv/Tenant-ID}}&id={{RGsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.delete",
									"description": "For deleting multiple Ring groups use RGs.csv file, just populate filds for Srv/Tenant-ID and RGsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{RGsID}}",
									"description": "Ring Group ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Ring Groups\n\nSupported Methods:\n\n`list` - List Ring Groups\n\n`add` - Add new Ring Group\n\n`edit` - Edit existing Ring Group\n\n`delete` - Delete existing Ring Group\n\n`configuration` - Existing Ring Groupe configuration"
		},
		{
			"name": "Enhanced Ring Groups",
			"item": [
				{
					"name": "Add ERGs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('ERG Created Successfully', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Extract ERG ID and set it as a collection variable for later use",
									"        pm.collectionVariables.set(\"ERGsID\", responseBody.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.add&server={{Srv/Tenant-ID}}&name={{ERG_Name}}&ext={{ERG_Number}}&max_wait_callers=10&rings_answer=0",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key."
								},
								{
									"key": "action",
									"value": "pbxware.erg.add",
									"description": "Add a new ERG."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{ERG_Name}}",
									"description": "Name of a new ERG. (Required). (Regex: /^[a-zA-Z0-9-_]+$/)"
								},
								{
									"key": "ext",
									"value": "{{ERG_Number}}",
									"description": "Extension number that will be used for ERG. (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "max_wait_callers",
									"value": "10",
									"description": "Maximum number of callers allowed to wait in a ERG at the same time. (Required). (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "rings_answer",
									"value": "0",
									"description": "Number of rings that will be played to a caller before call enters the ERG. (Required). (Regex: /^\\\\d{1}$/)."
								},
								{
									"key": "record",
									"value": "no",
									"description": "Set whether to record ERG calls or not. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "wake_mobile",
									"value": "no",
									"description": "Select whether ERG should wake up mobile devices that are asleep. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "replace_cid",
									"value": "ERG_CID",
									"description": "Replace the caller id with the custom value. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "queue_url",
									"value": "http://domain-name.com",
									"description": "Send the following URL to Member's softphone, if it supports that option, and the softphone can open that URL so the Member can see callers additional info if available. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "redirect_dest",
									"value": "888",
									"description": "ERG full redirect extension number. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "redirect_vm",
									"value": "yes",
									"description": "Choose whether the redirect extension is a voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "prioritize_timeout",
									"value": "yes",
									"description": "Set whether to prioritize ERG timeout or not. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "max_wait_seconds",
									"value": "10",
									"description": "Maximum time a caller can wait in an ERG. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "max_wait_dest",
									"value": "999",
									"description": "Set the extension to which caller will be redirected once time set under 'Max Wait Seconds' exceeds. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "max_wait_dest_vm",
									"value": "yes",
									"description": "Set whether the max wait destination is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "leave_when_empty",
									"value": "yes",
									"description": "When there are no members inside a queue, callers will leave it depending on the setting. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "empty_dest",
									"value": "666",
									"description": "When queue doesn\"t have any agent logged in, redirect callers to following destination. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "empty_dest_vm",
									"value": "yes",
									"description": "Set whether the empty destination extension is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "queue-greeting-empty",
									"description": "Select a greeting file that will be played to all callers waiting in this ERG. (Regex: /^queue-greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "announce_holdtime",
									"value": "yes",
									"description": "Enable callers waiting in an ERG to hear the hold-time announcements. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "announce_position",
									"value": "yes",
									"description": "Enable callers waiting in an ERG to hear the position announcements. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "announce_frequency",
									"value": "30",
									"description": "How often to play the hold-time announcement message (time in seconds). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "min_announce_frequency",
									"value": "5",
									"description": "Specifies the minimum amount of time that must pass before we announce the callerâ€™s position in an ERG again. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "announce_r_seconds",
									"value": "20",
									"description": "Rounding level for hold-time announcements. (Regex: /^(0|5|10|15|20|30)$/)",
									"disabled": true
								},
								{
									"key": "static_login",
									"value": "yes",
									"description": "Select whether to enable Static Members Login. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "member_es_disable",
									"value": "yes",
									"description": "If set to 'Yes', Enhanced Enhanced that are enabled on the Extension (that are ERG members) will possibly not be applied if an ERG call is passed to them. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "ringall",
									"description": "Set the way calls are transferred to ERG members answering the calls. (Regex: /^(ringall|linear|leastrecent|fewestcalls|random|rrmemory|rrordered|wrandom)$/)",
									"disabled": true
								},
								{
									"key": "member_ring_timeout",
									"value": "1234",
									"description": "Set the Member's ring timeout. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "autofill",
									"value": "no",
									"description": "Should callers be served one by one or in parallel fashion. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "ring_inuse",
									"value": "yes",
									"description": "Set whether Members in use should be called when a new caller comes into the ERG. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "retry_timeout",
									"value": "123",
									"description": "Time interval in seconds, for how long to wait before trying the ERG member again. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "timeout_restart",
									"value": "yes",
									"description": "If this option is set to yes and a BUSY or CONGESTION signal is received on the line, the Member's timeout for answering will be reset. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "wrapup_time",
									"value": "321",
									"description": "After a successful call, this will determine how long to wait (time interval in seconds) before sending a new call to a potentially free member. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "periodic_announce",
									"value": "default",
									"description": "Select the sound file that is played periodically to callers waiting in an ERG (has to be in the following format 'periodic-announce-$NAME.gsm' or 'default')\n(Regex: /^(default|periodic-announce\\\\-([\\\\w\\\\-]+))$/)",
									"disabled": true
								},
								{
									"key": "periodic_announce_frequency",
									"value": "69",
									"description": "Time interval in seconds at which the periodic message is to be played. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "first_periodic_announce",
									"value": "456",
									"description": "The minimum number of seconds between position announcements. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "incoming_options",
									"value": "tT",
									"description": "Set the advanced ERG call options. \nt \tallow the called user transfer the calling user\nT \tto allow the calling user to transfer the call.\nH \tallow caller to hang up by hitting *.\nn \tno retries on the timeout will exit this application and go to the next step.\nr \tring instead of playing MOH\nC \tavoid missed calls in ringall strategy",
									"disabled": true
								},
								{
									"key": "ring_timeout",
									"value": "4321",
									"description": "When 'r' is selected as Incoming Options and this timeout is used, ERG will first ring entered number of seconds after which MOH will start. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "use_exit_digit",
									"value": "yes",
									"description": "Should users be able to exit the ERG by dialing a single digit and be automatically redirected to a preset PBXware destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "9",
									"description": "Define the exit digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_dest",
									"value": "777",
									"description": "Local PBXware destination number that is dialed once the 'Exit Digit' is dialed. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "exit_vm",
									"value": "yes",
									"description": "Set whether the exit digit destination is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "enable_notification",
									"value": "yes",
									"description": "Enable or disable Abandoned Calls Notification feature. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "not_email@mali.com",
									"description": "The e-mail address which will receive notifications of abandoned calls, where an abandoned call is one where the caller hangs up the call while waiting to be answered. (Regex: /^[^@]+@[^@]+\\\\.[^@]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit ERGs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('ERG Created Successfully', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.edit&server={{Srv/Tenant-ID}}&id={{ERGsID}}",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key."
								},
								{
									"key": "action",
									"value": "pbxware.erg.edit",
									"description": "Edit already created ERGs."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "Enhanced Ring Group ID"
								},
								{
									"key": "name",
									"value": "NewName",
									"description": "Name of a new ERG. (Required). (Regex: /^[a-zA-Z0-9-_]+$/)",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "999",
									"description": "Extension number that will be used for ERG. (Required). (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "max_wait_callers",
									"value": "10",
									"description": "Maximum number of callers allowed to wait in a ERG at the same time. (Required). (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "rings_answer",
									"value": "0",
									"description": "Number of rings that will be played to a caller before call enters the ERG. (Required). (Regex: /^\\\\d{1}$/).",
									"disabled": true
								},
								{
									"key": "record",
									"value": "yes",
									"description": "Set whether to record ERG calls or not. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "wake_mobile",
									"value": "yes",
									"description": "Select whether ERG should wake up mobile devices that are asleep. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "replace_cid",
									"value": "NewERG_CID",
									"description": "Replace the caller id with the custom value. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "queue_url",
									"value": "http://test name.com",
									"description": "Send the following URL to Member's softphone, if it supports that option, and the softphone can open that URL so the Member can see callers additional info if available. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "redirect_dest",
									"value": "425",
									"description": "ERG full redirect extension number. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "redirect_vm",
									"value": "no",
									"description": "Choose whether the redirect extension is a voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "prioritize_timeout",
									"value": "no",
									"description": "Set whether to prioritize ERG timeout or not. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "max_wait_seconds",
									"value": "2233",
									"description": "Maximum time a caller can wait in an ERG. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "max_wait_dest",
									"value": "425",
									"description": "Set the extension to which caller will be redirected once time set under 'Max Wait Seconds' exceeds. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "max_wait_dest_vm",
									"value": "no",
									"description": "Set whether the max wait destination is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "leave_when_empty",
									"value": "no",
									"description": "When there are no members inside a queue, callers will leave it depending on the setting. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "empty_dest",
									"value": "425",
									"description": "When queue doesn\"t have any agent logged in, redirect callers to following destination. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "empty_dest_vm",
									"value": "no",
									"description": "Set whether the empty destination extension is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "queue-greeting-erg",
									"description": "Select a greeting file that will be played to all callers waiting in this ERG. (Regex: /^queue-greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "announce_holdtime",
									"value": "no",
									"description": "Enable callers waiting in an ERG to hear the hold-time announcements. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "announce_position",
									"value": "no",
									"description": "Enable callers waiting in an ERG to hear the position announcements. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "announce_frequency",
									"value": "60",
									"description": "How often to play the hold-time announcement message (time in seconds). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "min_announce_frequency",
									"value": "2",
									"description": "Specifies the minimum amount of time that must pass before we announce the callerâ€™s position in an ERG again. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "announce_r_seconds",
									"value": "10",
									"description": "Rounding level for hold-time announcements. (Regex: /^(0|5|10|15|20|30)$/)",
									"disabled": true
								},
								{
									"key": "static_login",
									"value": "no",
									"description": "Select whether to enable Static Members Login. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "member_es_disable",
									"value": "no",
									"description": "If set to 'Yes', Enhanced Enhanced that are enabled on the Extension (that are ERG members) will possibly not be applied if an ERG call is passed to them. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "linear",
									"description": "Set the way calls are transferred to ERG members answering the calls. (Regex: /^(ringall|linear|leastrecent|fewestcalls|random|rrmemory|rrordered|wrandom)$/)",
									"disabled": true
								},
								{
									"key": "member_ring_timeout",
									"value": "20",
									"description": "Set the Member's ring timeout. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "autofill",
									"value": "yes",
									"description": "Should callers be served one by one or in parallel fashion. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "ring_inuse",
									"value": "no",
									"description": "Set whether Members in use should be called when a new caller comes into the ERG. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "retry_timeout",
									"value": "30",
									"description": "Time interval in seconds, for how long to wait before trying the ERG member again. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "timeout_restart",
									"value": "no",
									"description": "If this option is set to yes and a BUSY or CONGESTION signal is received on the line, the Member's timeout for answering will be reset. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "wrapup_time",
									"value": "15",
									"description": "After a successful call, this will determine how long to wait (time interval in seconds) before sending a new call to a potentially free member. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "periodic_announce",
									"value": "periodic-announce-erg",
									"description": "Select the sound file that is played periodically to callers waiting in an ERG (has to be in the following format 'periodic-announce-$NAME.gsm' or 'default')\n(Regex: /^(default|periodic-announce\\\\-([\\\\w\\\\-]+))$/)",
									"disabled": true
								},
								{
									"key": "periodic_announce_frequency",
									"value": "30",
									"description": "Time interval in seconds at which the periodic message is to be played. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "first_periodic_announce",
									"value": "15",
									"description": "The minimum number of seconds between position announcements. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "incoming_options",
									"value": "r",
									"description": "Set the advanced ERG call options. \nt \tallow the called user transfer the calling user\nT \tto allow the calling user to transfer the call.\nH \tallow caller to hang up by hitting *.\nn \tno retries on the timeout will exit this application and go to the next step.\nr \tring instead of playing MOH\nC \tavoid missed calls in ringall strategy",
									"disabled": true
								},
								{
									"key": "ring_timeout",
									"value": "30",
									"description": "When 'r' is selected as Incoming Options and this timeout is used, ERG will first ring entered number of seconds after which MOH will start. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "use_exit_digit",
									"value": "no",
									"description": "Should users be able to exit the ERG by dialing a single digit and be automatically redirected to a preset PBXware destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "6",
									"description": "Define the exit digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_dest",
									"value": "425",
									"description": "Local PBXware destination number that is dialed once the 'Exit Digit' is dialed. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "exit_vm",
									"value": "no",
									"description": "Set whether the exit digit destination is pointing to voicemail. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "enable_notification",
									"value": "no",
									"description": "Enable or disable Abandoned Calls Notification feature. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "new_not@email.com",
									"description": "The e-mail address which will receive notifications of abandoned calls, where an abandoned call is one where the caller hangs up the call while waiting to be answered. (Regex: /^[^@]+@[^@]+\\\\.[^@]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List ERGs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if response is empty array",
									"    if (Object.keys(responseBody).length === 0) {",
									"        console.log(\"No created Enhanced Ring Groups for this Server/Tenant!\");",
									"        pm.test('No ERG Error', function () {",
									"            pm.expect.fail(\"No ERG created\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Loop through ERG data",
									"            for (var ergID in responseBody) {",
									"                var ergData = responseBody[ergID];",
									"",
									"                // Validate specific properties for each ERG",
									"                pm.test('ERG ' + ergID + ' Data Validation', function () {",
									"                    pm.expect(ergData).to.be.an('object');",
									"                    pm.expect(ergData).to.have.property('name').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('strategy').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('members').that.is.an('array');",
									"",
									"                    // Print the result for each ERG",
									"                    console.log('ERG ID:', ergID);",
									"                    console.log('ERG Name:', ergData.name);",
									"                    console.log('ERG Number:', ergData.number);",
									"                    console.log('ERG Strategy:', ergData.strategy);",
									"                    console.log('ERG Members:', ergData.members);",
									"                });",
									"            }",
									"        });",
									"        ",
									"        // Save ERG IDs to variable",
									"        var ergIDs = Object.keys(responseBody);",
									"        pm.collectionVariables.set('ERGsID', ergIDs);",
									"        pm.environment.set('ERGsID', ergIDs);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ERG ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.members&server={{Srv/Tenant-ID}}&id={{ERGsID}}&numbers={{RGExt}}&penalties={{ERGPenal}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.members",
									"description": "Adding members to an Enhanced Ring Group. If need to add members in multiple ERGs use ERGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "ID of an Enhanced Ring Group (Required)"
								},
								{
									"key": "numbers",
									"value": "{{RGExt}}",
									"description": "List of extension numbers separated with , (Required)"
								},
								{
									"key": "penalties",
									"value": "{{ERGPenal}}",
									"description": "List of penalties separated with , (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ERGs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Deleted ERG successfully!', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.delete&server={{Srv/Tenant-ID}}&id={{ERGsID}}",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.delete",
									"description": "Deleting Enhanced Ring Groups"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant/Server ID"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "Enhanced Ring Group IDs"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Enhanced Ring Groups\n\nSupported Methods\n\n`add` - Add/Create a new ERG\n\n`edit` - Edit existing ERG\n\n`list` - List Enhanced Ring Groups\n\n`members` - Adding members to an Enhanced Ring Group\n\n`delete` - Delete ERG"
		},
		{
			"name": "CDRs",
			"item": [
				{
					"name": "Downloading CDRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('next_page').that.is.a('boolean');",
									"        pm.expect(responseBody).to.have.property('limit').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('records').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('header');",
									"        pm.expect(responseBody).to.have.property('csv').that.is.an('array');",
									"",
									"        // Check if header is null",
									"        if (responseBody.header === null) {",
									"            console.log('No Data available for given date/time!');",
									"            pm.test('No Data available for given date/time!', function () {",
									"                pm.expect(false).to.be.true; // Mark the test as Pass with a custom message",
									"            });",
									"        } else {",
									"            // Header is an array, validate it",
									"            var expectedHeader = [",
									"                \"Tenant\",",
									"                \"From\",",
									"                \"To\",",
									"                \"Date/Time\",",
									"                \"Total Duration\",",
									"                \"Rating Duration\",",
									"                \"Rating Cost\",",
									"                \"Status\",",
									"                \"ID\",",
									"                \"Recording Path\",",
									"                \"Recording Available\",",
									"                \"Location Type\"",
									"            ];",
									"",
									"            pm.expect(responseBody.header).to.deep.equal(expectedHeader);",
									"",
									"            /*",
									"            // Print the success message",
									"            console.log('Success:', responseBody.success);",
									"            console.log('Next Page:', responseBody.next_page);",
									"            console.log('Limit:', responseBody.limit);",
									"            console.log('Records:', responseBody.records);",
									"",
									"            // Loop through records",
									"            for (var record of responseBody.csv) {",
									"                console.log('Record:', record);",
									"                console.log('Tenant:', record[0]);",
									"                console.log('From:', record[1]);",
									"                console.log('To:', record[2]);",
									"                console.log('Date/Time:', record[3]);",
									"                console.log('Total Duration:', record[4]);",
									"                console.log('Rating Duration:', record[5]);",
									"                console.log('Rating Cost:', record[6]);",
									"                console.log('Status:', record[7]);",
									"                console.log('ID:', record[8]);",
									"                console.log('Recording Path:', record[9]);",
									"            }*/",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.cdr.download&start=Sep-27-2022&end=Sep-27-2025",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.cdr.download",
									"description": "Download CDRs"
								},
								{
									"key": "start",
									"value": "Sep-27-2022",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "13:00:00",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "end",
									"value": "Sep-27-2025",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "13:05:00",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 â‡’ \"Answered\", 4 â‡’ \"Unanswered\", 2 â‡’ \"Busy\", 1 â‡’ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 â‡’ \"Incoming\", 2 â‡’ \"Outgoing\", 3 â‡’ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CDR Billamount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('billamount').that.is.a('string');",
									"",
									"        // Print the bill amount",
									"        console.log('Bill Amount:', responseBody.billamount);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.cdr.billamount&start=Sep-01-2023&end=Sep-31-2023",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.cdr.billamount"
								},
								{
									"key": "start",
									"value": "Sep-01-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "end",
									"value": "Sep-31-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 â‡’ \"Answered\", 4 â‡’ \"Unanswered\", 2 â‡’ \"Busy\", 1 â‡’ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 â‡’ \"Incoming\", 2 â‡’ \"Outgoing\", 3 â‡’ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# CDRs\n\nSupported Methods:\n\n`download` \\- Download CDRs\n\n`billamount` \\- Returns sum of billing amounts"
		},
		{
			"name": "Archiving",
			"item": [
				{
					"name": "Listing Archivings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if the response is not an empty array",
									"if (Array.isArray(responseBody) && responseBody.length > 0 && 'error' in responseBody[0]) {",
									"    console.error('Test Failed: ' + responseBody[0].error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody[0].error);",
									"    });",
									"} /*else if (responseBody.length === 0) {",
									"    console.error('Test Failed: There are no archiving records for the selected Date/Time range!');",
									"    pm.test('No Archiving Records Found', function () {",
									"        pm.expect.fail('There are no archiving records for the selected Date/Time range!');",
									"    });*/",
									"    else if (responseBody.length === 0) {",
									"    console.log('Test Passed: There are no archiving records for the selected Date/Time range!');",
									"    pm.test('No Archiving Records Found for the selected Date/Time range!', function () {",
									"        pm.expect(true).to.be.true; // Mark the test as passed",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('array');",
									"",
									"        // Iterate through each archiving record",
									"        for (var recordKey in responseBody) {",
									"            if (responseBody.hasOwnProperty(recordKey)) {",
									"                var record = responseBody[recordKey];",
									"",
									"                pm.expect(record).to.be.an('object');",
									"                pm.expect(record).to.have.property('tenant').that.is.a('string');",
									"                pm.expect(record).to.have.property('date_time').that.is.a('string');",
									"                pm.expect(record).to.have.property('status').that.is.a('string');",
									"",
									"                // Recording array",
									"                var recording = record.recording;",
									"                pm.expect(recording).to.be.an('object');",
									"                pm.expect(recording).to.have.property('success').that.is.a('string');",
									"                pm.expect(recording).to.have.property('failed').that.is.a('string');",
									"",
									"                // Fax array",
									"                var fax = record.fax;",
									"                pm.expect(fax).to.be.an('object');",
									"                pm.expect(fax).to.have.property('success');",
									"                pm.expect(fax.success).to.satisfy(val => typeof val === 'string' || val === null);",
									"",
									"                // Voicemail array",
									"                var voicemail = record.voicemail;",
									"                pm.expect(voicemail).to.be.an('object');",
									"                pm.expect(voicemail).to.have.property('success');",
									"                pm.expect(voicemail.success).to.satisfy(val => typeof val === 'string' || val === null);",
									"",
									"                if ('cdr' in record || 'chat' in record) {",
									"                    var cdr = record.cdr;",
									"                    pm.expect(cdr).to.be.an('object');",
									"                    pm.expect(cdr).to.have.property('success').to.be.oneOf(['string', null]);",
									"                    pm.expect(cdr).to.have.property('failed').to.be.oneOf(['string', null]);",
									"",
									"                    var chat = record.chat;",
									"                    pm.expect(chat).to.be.an('object');",
									"                    pm.expect(chat).to.have.property('success').to.be.oneOf(['string', null]);",
									"                    pm.expect(chat).to.have.property('failed').to.be.oneOf(['string', null]);",
									"                }",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.archiving.list&start_date=Oct-19-2022&end_date=Oct-19-2025",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.archiving.list",
									"description": "List Archivings"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2022",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2025",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "end_time",
									"value": "",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Status-Filter by three available statuses separated by a comma (SUCCESS, FAILURE, PARTIAL). (Regex: /^(?:\\\\b(SUCCESS|PARTIAL|FAILED)\\\\b,?){1,3}$/i)",
									"disabled": true
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant code - Filter reports by a specific tenant",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Archiving\n\nSupported Methods\n\n`list` - Listing Archivings"
		},
		{
			"name": "Routes",
			"item": [
				{
					"name": "Listing Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Loop through the route data",
									"        for (var routeID in responseBody) {",
									"            var routeData = responseBody[routeID];",
									"",
									"            // Validate specific properties for each route",
									"            pm.test('Route ' + routeID + ' Data Validation', function () {",
									"                pm.expect(routeData).to.be.an('array');",
									"                pm.expect(routeData).to.have.lengthOf(2);",
									"",
									"                // Print the result for each route",
									"                console.log('Route ID:', routeID);",
									"                console.log('Route Code:', routeData[0]);",
									"                console.log('Route Name:', routeData[1]);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.route.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.route.list"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Routes\n\nSupported Methods\n\n`list -` List Routes"
		},
		{
			"name": "Operation Times",
			"item": [
				{
					"name": "DID OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if the response contains an \"error\" field",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"   // Check if the response body is an empty array",
											"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
											"        // Handle the case where the response is an empty array",
											"        pm.test('Empty Response', function () {",
											"            pm.expect.fail('There is no Operation times defined for given parameters!');",
											"        });",
											"    } else {",
											"        // Validate the response structure",
											"        pm.test('Response Validation', function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"",
											"            // Iterate through the keys (IDs) in the response",
											"            for (var id in responseBody) {",
											"                var operationTimes = responseBody[id];",
											"",
											"                // Validate specific properties for each operation time",
											"                pm.expect(operationTimes).to.have.property('status').that.is.oneOf(['on', 'off', 'inherit']);",
											"                pm.expect(operationTimes).to.have.property('greeting').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_ext').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_is_vm').that.is.oneOf(['yes', 'no']);",
											"",
											"                // Validate the closed dates for each operation time",
											"                pm.expect(operationTimes).to.have.property('closed_dates').that.is.an('array');",
											"                operationTimes.closed_dates.forEach(function (closedDate) {",
											"                    pm.expect(closedDate).to.be.an('object');",
											"                    pm.expect(closedDate).to.have.property('description').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_to').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the custom destinations for each operation time",
											"                pm.expect(operationTimes).to.have.property('custom_destinations').that.is.an('array');",
											"                operationTimes.custom_destinations.forEach(function (customDest) {",
											"                    pm.expect(customDest).to.be.an('object');",
											"                    pm.expect(customDest).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('is_open_range').that.is.oneOf(['yes', 'no']);",
											"                    pm.expect(customDest).to.have.property('days').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the open days for each operation time",
											"                pm.expect(operationTimes).to.have.property('open_days').that.is.an('array');",
											"                operationTimes.open_days.forEach(function (openDay) {",
											"                    pm.expect(openDay).to.be.an('object');",
											"                    pm.expect(openDay).to.have.property('description').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('days').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_to').that.is.a('string');",
											"                });",
											"            }",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.did.list&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.did.list"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Request the Operation Times state by destination server ID (used with MT systems in combination with other fields)"
										},
										{
											"key": "id",
											"value": "{{DID-IDs}}",
											"description": "Request the Operation Times state by destination ID (most of destionation supports this)"
										},
										{
											"key": "ext",
											"value": "",
											"description": "Request the Operation Times state by destination extension (used for DIDs)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Operation Times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check for the success message",
											"    pm.test('Edited Operation Times successfuly!', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?action=pbxware.otimes.did.set&apikey={{API_Key}}&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "pbxware.otimes.did.set"
										},
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID on MT systems"
										},
										{
											"key": "id",
											"value": "{{DID-IDs}}",
											"description": "DID ID to edit."
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the Operation Times. (Regex: /^(on|off|inherit)$/))",
											"disabled": true
										},
										{
											"key": "greeting",
											"value": "",
											"description": "Greeting sound file. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
											"disabled": true
										},
										{
											"key": "default_dest_ext",
											"value": "",
											"description": "Default extension to which all calls will be redirected. ((Regex: /^\\\\d+$/))",
											"disabled": true
										},
										{
											"key": "default_dest_is_vm",
											"value": "",
											"description": "Default extension is Voicemail or not. (Regex: /^(yes|no)$/)",
											"disabled": true
										},
										{
											"key": "closed_dates_desc[]",
											"value": "",
											"description": "Ordered descriptions of the closed dates settings",
											"disabled": true
										},
										{
											"key": "closed_dates_dest[]",
											"value": "",
											"description": "Ordered extensions of the closed dates settings",
											"disabled": true
										},
										{
											"key": "closed_dates_date_from[]",
											"value": "",
											"description": "Ordered From dates of the closed dates settings. When setting up Closed Dates it is important that dates follow the yyyy-mm-dd format. For example: 2023-02-20",
											"disabled": true
										},
										{
											"key": "closed_dates_date_to[]",
											"value": "",
											"description": "Ordered To dates. When setting up Closed Dates it is important that dates follow the yyyy-mm-dd format. For example: 2023-02-20",
											"disabled": true
										},
										{
											"key": "closed_dates_time_from[]",
											"value": "",
											"description": "Ordered From time.",
											"disabled": true
										},
										{
											"key": "closed_dates_time_to[]",
											"value": "",
											"description": "Ordered To time",
											"disabled": true
										},
										{
											"key": "custom_destinations_dest[]",
											"value": "",
											"description": "Ordered destinations of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_is_open[]",
											"value": "",
											"description": "Ordered opened status of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_days[]",
											"value": "",
											"description": "Ordered days in the week of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_time_from[]",
											"value": "",
											"description": "Ordered time from of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_time_to[]",
											"value": "",
											"description": "Ordered time to of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "open_days_desc[]",
											"value": "",
											"description": "Ordered description of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days[]",
											"value": "",
											"description": "Ordered days in the week of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days_time_from[]",
											"value": "",
											"description": "Ordered time from of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days_time_to[]",
											"value": "",
											"description": "Ordered time to of the open days settings",
											"disabled": true
										},
										{
											"key": "pin",
											"value": "",
											"description": "PIN number used for Routes Operation Times only",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "IVR OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if the response contains an \"error\" field",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"   // Check if the response body is an empty array",
											"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
											"        // Handle the case where the response is an empty array",
											"        pm.test('Empty Response', function () {",
											"            pm.expect.fail('There is no Operation times defined for given parameters!');",
											"        });",
											"    } else {",
											"        // Validate the response structure",
											"        pm.test('Response Validation', function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"",
											"            // Iterate through the keys (IDs) in the response",
											"            for (var id in responseBody) {",
											"                var operationTimes = responseBody[id];",
											"",
											"                // Validate specific properties for each operation time",
											"                pm.expect(operationTimes).to.have.property('status').that.is.oneOf(['on', 'off', 'inherit']);",
											"                pm.expect(operationTimes).to.have.property('greeting').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_ext').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_is_vm').that.is.oneOf(['yes', 'no']);",
											"",
											"                // Validate the closed dates for each operation time",
											"                pm.expect(operationTimes).to.have.property('closed_dates').that.is.an('array');",
											"                operationTimes.closed_dates.forEach(function (closedDate) {",
											"                    pm.expect(closedDate).to.be.an('object');",
											"                    pm.expect(closedDate).to.have.property('description').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_to').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the custom destinations for each operation time",
											"                pm.expect(operationTimes).to.have.property('custom_destinations').that.is.an('array');",
											"                operationTimes.custom_destinations.forEach(function (customDest) {",
											"                    pm.expect(customDest).to.be.an('object');",
											"                    pm.expect(customDest).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('is_open_range').that.is.oneOf(['yes', 'no']);",
											"                    pm.expect(customDest).to.have.property('days').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the open days for each operation time",
											"                pm.expect(operationTimes).to.have.property('open_days').that.is.an('array');",
											"                operationTimes.open_days.forEach(function (openDay) {",
											"                    pm.expect(openDay).to.be.an('object');",
											"                    pm.expect(openDay).to.have.property('description').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('days').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_to').that.is.a('string');",
											"                });",
											"            }",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.ivr.list&server={{Srv/Tenant-ID}}&id={{IVR-ID}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.ivr.list"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Request the Operation Times state by destination server ID (used with MT systems in combination with other fields)"
										},
										{
											"key": "id",
											"value": "{{IVR-ID}}",
											"description": "Request the Operation Times state by destination ID (most of destionation supports this)"
										},
										{
											"key": "ext",
											"value": "",
											"description": "Request the Operation Times state by destination extension (used for DIDs)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dial Group OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.dial_group.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.dial_group.list"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Server OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.servers.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.servers.list"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Routes OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.routes.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.routes.list"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Queues OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.queues.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.queues.list"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ERG OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.erg.list&id",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.erg.list"
										},
										{
											"key": "id",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Operation Times exist for the following: DIDs, IVRs, Dial Groups, Server/Tenants, Routes, Queues and Enhanced Ring Groups.\n\nActions:\n\n`action=pbxware.otimes.did` - Operation Times action URL for DIDs\n\n`action=pbxware.otimes.ivr` - Operation Times action URL for IVRs\n\n`action=pbxware.otimes.dial_group` - Operation Times action URL for Dial Groups\n\n`action=pbxware.otimes.servers` - Operation Times action URL for Server/Tenants\n\n`action=pbxware.otimes.routes` - Operation Times action URL for Routes\n\n`action=pbxware.otimes.queues` - Operation Times action URL for Queues\n\n`action=pbxware.otimes.erg` - Operation Times action URL for Enhanced Ring Groups\n\nEach of those destinations Operation Times are a state, which means  \nthat you can list the current state of the destinations or set the  \nentire state of the destination Operation Times.\n\nSupported Methods:\n\n`list` - Listing the state of Operation Times\n\n`set` - Set the state of Operation Times"
		},
		{
			"name": "Tenant Packages",
			"item": [
				{
					"name": "Tenant Package Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageConfig = responseBody[id];",
									"",
									"            // Validate specific properties for each package configuration",
									"            pm.expect(packageConfig).to.have.property('name').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('service_plan').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('allowed_service_plans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ext').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('voicemail').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('queues').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ivr').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('cf').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('rgroups').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('hot_desking').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('restrict_splans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_recordings').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('monitoring').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_screening').that.is.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.configuration&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.configuration",
									"description": "Response will consist of an array of tenant package configuration."
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageName = responseBody[id];",
									"",
									"            // Validate specific properties for each package",
									"            pm.expect(packageName).to.be.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant Package ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.add&name={{TenantPackageName}}&restrict_splans=0&allowed_service_plans=1&call_recordings=1&monitoring=1&call_screening=1&extensions=100&voicemails=100&queues=100&cfs=100&rgroups=100&hot_desking=100&ivrs=100",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.add"
								},
								{
									"key": "name",
									"value": "{{TenantPackageName}}",
									"description": "Tenant Package Name (Required)"
								},
								{
									"key": "restrict_splans",
									"value": "0",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)"
								},
								{
									"key": "allowed_service_plans",
									"value": "1",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)"
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "1",
									"description": "Country ID (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "monitoring",
									"value": "1",
									"description": "Area Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "call_screening",
									"value": "1",
									"description": "National Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "extensions",
									"value": "100",
									"description": "Extensions (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemails",
									"value": "100",
									"description": "Voicemails (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "queues",
									"value": "100",
									"description": "Queues (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "cfs",
									"value": "100",
									"description": "Conferences (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "rgroups",
									"value": "100",
									"description": "Ring Groups (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "hot_desking",
									"value": "100",
									"description": "Hot Desking (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "ivrs",
									"value": "100",
									"description": "IVRs (Required). (Regex: /^\\\\d{1,4}$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.edit&server={{Srv/Tenant-ID}}&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.edit",
									"description": "Arguments are identical to the ones in Adding Tenant Packages section. All of them are optional, except:"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID which must be set to 1. (Required)"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID."
								},
								{
									"key": "name",
									"value": "",
									"description": "Tenant Package Name",
									"disabled": true
								},
								{
									"key": "restrict_splans",
									"value": "",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "allowed_service_plans",
									"value": "",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "",
									"description": "Country ID. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "monitoring",
									"value": "",
									"description": "Area Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "call_screening",
									"value": "",
									"description": "National Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "",
									"description": "Extensions. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "voicemails",
									"value": "",
									"description": "Voicemails. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "cfs",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "rgroups",
									"value": "",
									"description": "Ring Groups. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "hot_desking",
									"value": "",
									"description": "Hot Desking. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "ivrs",
									"value": "",
									"description": "IVRs. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.delete&server={{Srv/Tenant-ID}}&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.delete"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`configuration` - Tenant Package Configuration\n\n`list` - List Tenant Packages\n\n`add` - Add new Tenant Package\n\n`edit` - Edit existing Tenant Package\n\n`delete` - Delete existing Tenant Package"
		},
		{
			"name": "Tenants",
			"item": [
				{
					"name": "Tenant Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('server_name').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenantcode').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('package_id').that.is.a('string');",
									"        pm.expect(responseBody.glocom_dns_srv_lookup).to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('glocomproxy').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('absolutetimeout').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('cdrvoicemail').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('faxformat').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('faxfiletype').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('status').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('default_location').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordbeep').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ringtonelocal').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('didsaveupdatecid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('enabletcalls').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('tenantcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('tenant_faxcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordlimit').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('country').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('area_code').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('national').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('international').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_ambulance').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_fire').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_police').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_notification_email').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('emergency_callerid_tenant').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('audiolang').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('apusername').that.satisfies(value => typeof value === 'string' || value === null);",
									"        pm.expect(responseBody).to.have.property('appassword').that.satisfies(value => typeof value === 'string' || value === null);",
									"        pm.expect(responseBody).to.have.property('incominglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('outgoinglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('conch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('quech').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ergch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('aach').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zapch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('notifyemail').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_timeout').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_dial').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_goto').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlockext').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlockdevice').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlogoutinactive').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('custompresencetime').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('dialed_num_minimum_length').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('announcetrunks').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordglobal').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordsilent').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hidecallerid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('allowescallerid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('enablecnamlookup').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('setcidforgrouphunt').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cidmatchdid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('dropanonymous').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('forceunknown').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hideextnodir').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedynfeatures').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('nobillingfwd').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cf_call_rating_disable').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('allowextipauth').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('voiceskippin').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedefaultcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedidcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('finde164').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('showdirosc').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('leavenational').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('limitsound').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('limitemail').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('pstn_mode').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdcheck').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdautologout').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody.local_codecs).to.be.an('array');",
									"        pm.expect(responseBody.remote_codecs).to.be.an('array');",
									"        pm.expect(responseBody.network_codecs).to.be.an('array');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.configuration&id={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.configuration",
									"description": "Response will consist of an array of tenant configuration."
								},
								{
									"key": "id",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There is no Tenant created on this system!\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There is no Tenant created on this system!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            // Iterate through each object in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var tenant = responseBody[key];",
									"",
									"                    pm.test('Tenant ' + tenant.name + ' Validation', function () {",
									"                        pm.expect(tenant).to.be.an('object');",
									"                        pm.expect(tenant).to.have.property('name').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('tenantcode').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('package_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('package').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('ext_length').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_code').that.is.a('number');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.add&tenant_name={{tenant_name}}&tenant_code={{tenant_code}}&package={{TenantPackageID}}&ext_length={{ExtLength}}&country={{Country}}&national={{NationalCode}}&international={{InternationalCode}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.add"
								},
								{
									"key": "tenant_name",
									"value": "{{tenant_name}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)"
								},
								{
									"key": "tenant_code",
									"value": "{{tenant_code}}",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "ext_length",
									"value": "{{ExtLength}}",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)"
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)",
									"disabled": true
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "glocomproxy",
									"value": "",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "apusername",
									"value": "",
									"description": "HTTP username. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "appassword",
									"value": "",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)",
									"disabled": true
								},
								{
									"key": "defaultserver",
									"value": "",
									"description": "Default Server. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "announcetrunks",
									"value": "",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "absolutetimeout",
									"value": "",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "cdrvoicemail",
									"value": "",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "faxformat",
									"value": "",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto",
									"disabled": true
								},
								{
									"key": "faxfiletype",
									"value": "",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF",
									"disabled": true
								},
								{
									"key": "default_location",
									"value": "",
									"description": "Default Extension Location (Local=1, Remote=2)",
									"disabled": true
								},
								{
									"key": "enabletcalls",
									"value": "",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "disabletcid",
									"value": "",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "tenantcid",
									"value": "",
									"description": "Default CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_faxcid",
									"value": "",
									"description": "Default Fax CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "usedefaultcid",
									"value": "",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "usedidcid",
									"value": "",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "finde164",
									"value": "",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordlimit",
									"value": "",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "showdirosc",
									"value": "",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordglobal",
									"value": "",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "mp3_auto_conv",
									"value": "",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)",
									"disabled": true
								},
								{
									"key": "recordbeep",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "recordformat",
									"value": "",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native â†’ GSM\n-ogg: OGG",
									"disabled": true
								},
								{
									"key": "audiolang",
									"value": "",
									"description": "Audio Language. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "cpark_timeout",
									"value": "",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "limitemail",
									"value": "",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "notifyemail",
									"value": "",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "leavenational",
									"value": "",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)",
									"disabled": true
								},
								{
									"key": "currencypos",
									"value": "",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "pstn_mode",
									"value": "",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "callgroups",
									"value": "",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)",
									"disabled": true
								},
								{
									"key": "localcodecs",
									"value": "",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "remotecodecs",
									"value": "",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "networkcodecs",
									"value": "",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "hdcheck",
									"value": "",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlockext",
									"value": "",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdlockdevice",
									"value": "",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdautologout",
									"value": "",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlogoutinactive",
									"value": "",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "ringtonelocal",
									"value": "",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "hidecallerid",
									"value": "",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "allowescallerid",
									"value": "",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "enablecnamlookup",
									"value": "",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "setcidforgrouphunt",
									"value": "",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "didsaveupdatecid",
									"value": "",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "forceunknown",
									"value": "",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hideextnodir",
									"value": "",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "custompresencetime",
									"value": "",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "usedynfeatures",
									"value": "",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allowextipauth",
									"value": "",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/).",
									"disabled": true
								},
								{
									"key": "voiceskippin",
									"value": "",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "email_from",
									"value": "",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vm_email_from",
									"value": "",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "local_channels",
									"value": "",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "remote_channels",
									"value": "",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "conferences",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "auto_attendants",
									"value": "",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dahdi",
									"value": "",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_order",
									"value": "",
									"description": "Order By. (Regex: /^(did|date)$/)",
									"disabled": true
								},
								{
									"key": "es_ambulance",
									"value": "",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_fire",
									"value": "",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_police",
									"value": "",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_notification_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)",
									"disabled": true
								},
								{
									"key": "ldap_enabled",
									"value": "",
									"description": "Enable LDAP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "ldap_local_exts",
									"value": "",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_hotdesking",
									"value": "",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_password",
									"value": "",
									"description": "LDAP password. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "emerg_location_header",
									"value": "",
									"description": "Emergency Location Header. (Regex: /^[\\\\w\\\\-,]{1,100}$/)",
									"disabled": true
								},
								{
									"key": "sso_enforced_tenant",
									"value": "",
									"description": "Enable SSO on tenant. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "Maximum Connected Devices. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.edit&server=1&id={{tenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.edit"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{tenantID}}",
									"description": "Tenant ID. For editing more tenants use CSV filr Add&Edit-Tenants.csv"
								},
								{
									"key": "status",
									"value": "{{TenantStatus}}",
									"description": "Status (Not Active=0, Active=1, Suspended=2)",
									"disabled": true
								},
								{
									"key": "tenant_name",
									"value": "{{tenant_name}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_code",
									"value": "{{tenant_code}}",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "ext_length",
									"value": "{{ExtLength}}",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)",
									"disabled": true
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "glocomproxy",
									"value": "",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "apusername",
									"value": "",
									"description": "HTTP username. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "appassword",
									"value": "",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)",
									"disabled": true
								},
								{
									"key": "defaultserver",
									"value": "",
									"description": "Default Server. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "announcetrunks",
									"value": "",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "absolutetimeout",
									"value": "",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "cdrvoicemail",
									"value": "",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "faxformat",
									"value": "",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto",
									"disabled": true
								},
								{
									"key": "faxfiletype",
									"value": "",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF",
									"disabled": true
								},
								{
									"key": "default_location",
									"value": "",
									"description": "Default Extension Location (Local=1, Remote=2)",
									"disabled": true
								},
								{
									"key": "enabletcalls",
									"value": "",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "disabletcid",
									"value": "",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "tenantcid",
									"value": "",
									"description": "Default CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_faxcid",
									"value": "",
									"description": "Default Fax CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "usedefaultcid",
									"value": "",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "usedidcid",
									"value": "",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "finde164",
									"value": "",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordlimit",
									"value": "",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "showdirosc",
									"value": "",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordglobal",
									"value": "",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "mp3_auto_conv",
									"value": "",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)",
									"disabled": true
								},
								{
									"key": "recordbeep",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "recordformat",
									"value": "",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native â†’ GSM\n-ogg: OGG",
									"disabled": true
								},
								{
									"key": "audiolang",
									"value": "",
									"description": "Audio Language. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "cpark_timeout",
									"value": "",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "limitemail",
									"value": "",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "notifyemail",
									"value": "",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "leavenational",
									"value": "",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)",
									"disabled": true
								},
								{
									"key": "currencypos",
									"value": "",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "pstn_mode",
									"value": "",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "callgroups",
									"value": "",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)",
									"disabled": true
								},
								{
									"key": "localcodecs",
									"value": "",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "remotecodecs",
									"value": "",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "networkcodecs",
									"value": "",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "hdcheck",
									"value": "",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlockext",
									"value": "",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdlockdevice",
									"value": "",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdautologout",
									"value": "",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlogoutinactive",
									"value": "",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "ringtonelocal",
									"value": "",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "hidecallerid",
									"value": "",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "allowescallerid",
									"value": "",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "enablecnamlookup",
									"value": "",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "setcidforgrouphunt",
									"value": "",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "didsaveupdatecid",
									"value": "",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "forceunknown",
									"value": "",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hideextnodir",
									"value": "",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "custompresencetime",
									"value": "",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "usedynfeatures",
									"value": "",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allowextipauth",
									"value": "",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/).",
									"disabled": true
								},
								{
									"key": "voiceskippin",
									"value": "",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "email_from",
									"value": "",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vm_email_from",
									"value": "",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "local_channels",
									"value": "",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "remote_channels",
									"value": "",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "conferences",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "auto_attendants",
									"value": "",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dahdi",
									"value": "",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_order",
									"value": "",
									"description": "Order By. (Regex: /^(did|date)$/)",
									"disabled": true
								},
								{
									"key": "es_ambulance",
									"value": "",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_fire",
									"value": "",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_police",
									"value": "",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_notification_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)",
									"disabled": true
								},
								{
									"key": "ldap_enabled",
									"value": "",
									"description": "Enable LDAP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "ldap_local_exts",
									"value": "",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_hotdesking",
									"value": "",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_password",
									"value": "",
									"description": "LDAP password. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "emerg_location_header",
									"value": "",
									"description": "Emergency Location Header. (Regex: /^[\\\\w\\\\-,]{1,100}$/)",
									"disabled": true
								},
								{
									"key": "sso_enforced_tenant",
									"value": "",
									"description": "Enable SSO on tenant. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "Maximum Connected Devices. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        //console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.delete&server=1&id={{tenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.delete"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{tenantID}}",
									"description": "Tenant ID. For deletenig more tenants use Add&Edit-Tenant.csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseData = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseData) {",
									"    console.error(\"Test Failed: \" + responseData.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseData.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData).to.have.property('primary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('trunks').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('primary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_emerg_trunk').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.list&tenant={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.list"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Setting Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.set&tenant={{Srv/Tenant-ID}}&trunks={{TrunkIDs}}&primary_trunk={{Primary}}&primary_emerg_trunk={{PrimaryEm}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.set",
									"description": "For setting more tenants with same trunks use Setting-Trunks&Tenants.csv file"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID"
								},
								{
									"key": "trunks",
									"value": "{{TrunkIDs}}",
									"description": "List of trunk IDâ€™s (comma separated). (Regex: /^[0-9,]+$/)"
								},
								{
									"key": "primary_trunk",
									"value": "{{Primary}}",
									"description": "Primary trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_trunk",
									"value": "{{Secondary}}",
									"description": "Secondary trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "{{Tertiary}}",
									"description": "Tertiary trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "{{PrimaryEm}}",
									"description": "Primary emergency trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "{{SecondaryEm}}",
									"description": "Secondary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "{{TertiaryEm}}",
									"description": "Tertiary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.add&tenant={{Srv/Tenant-ID}}&callerid={{CallerID}}&dest_type={{DestType}}&destination={{Destination}}&matchexplicitly={{MatchEx}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required).If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.edit&tenant={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.edit",
									"description": "Editing CLI Routing. Arguments are identical to the ones in Adding CLI Routing section. If need to edit multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID. (Regex: /^\\\\d+$/).",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value",
									"disabled": true
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if \"success\" field is an empty array",
									"if (Array.isArray(responseBody.success) && responseBody.success.length === 0) {",
									"    console.error(\"Test Failed: There is no CLI routing created for selected Tenant!\");",
									"    pm.test('No CLI Routing Found', function () {",
									"        pm.expect.fail(\"There is no CLI routing created for selected Tenant!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each CLI routing entry",
									"        for (var cliroutingId in responseBody.success) {",
									"            var clirouting = responseBody.success[cliroutingId];",
									"            pm.expect(clirouting).to.be.an('object');",
									"",
									"            pm.test(`CLI Routing ${cliroutingId} Validation`, function () {",
									"                pm.expect(clirouting).to.have.property('callerid').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('ext').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('type').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('matchtype').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.list&tenant={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.list"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletenig CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.delete&tenant={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`configuration` - Tenant Configuration\n\n`list` - List Tenants\n\n`add` - Add new Tenant\n\n`edit` - Edit existing Tenant\n\n`delete` - Delete existing Tenant\n\n`trunks.list` - List Trunks & Tenants\n\n`trunks.set` - Set Trunks & Tenants\n\n`clirouting.add` - Add CLI routing\n\n`clirouting.edit` - Edit CLI routing\n\n`clirouting.list` - List CLI routing\n\n`clirouting.delete` - Delete CLI routing"
		},
		{
			"name": "Servers",
			"item": [
				{
					"name": "Server Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific fields in the response",
									"        pm.expect(responseBody).to.have.property('server_name').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('domainname').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('absolutetimeout').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('cdrvoicemail').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxfiletype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('mp3_auto_conv').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('didmode').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rpsexpiry').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('show_advanced_opts').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('setcidforgrouphunt').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenant_calls_enabled').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('show_dir_osc').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('nodidresponse').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('erg_abandoned_check_interval').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('country').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zaptel_zone').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('indications').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('area_code').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('national').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('international').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('currency_writing_convention').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('agi_port').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('email_from').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_lan').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_wan').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_req_num').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('enable_tftp').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('incominglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('outgoinglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('conch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('quech').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ergch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('aach').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zapch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('e2faxch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('pbd_pin_length').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('mint').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rltype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rtype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('emailto').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('limit_notify_email').that.is.a('string');",
									"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.server.configuration",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.server.configuration"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`configuration` - Server Configuration"
		},
		{
			"name": "Service Plans",
			"item": [
				{
					"name": "Listing Service Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There is no service plan created on Server!\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There is no service plan created on this Server!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Iterate through each Service Plan",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var servicePlan = responseBody[key];",
									"",
									"                    pm.test('Service Plan ' + servicePlan.name + ' Validation', function () {",
									"                        pm.expect(servicePlan).to.be.an('object');",
									"                        pm.expect(servicePlan).to.have.property('name').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('tbd').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('min_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('connection_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('inclusive').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('grace_period').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('billing').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('call_rating').that.is.a('string');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.list"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Plans Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Define a flag to check if the element exists",
									"    var elementExists = false;",
									"",
									"    // Loop through the response and find the element with numeric keys",
									"    for (var key in responseBody) {",
									"        if (typeof responseBody[key] === 'object') {",
									"            for (var innerKey in responseBody[key]) {",
									"                if (!isNaN(innerKey)) {",
									"                    elementExists = true;",
									"                    validateFields(responseBody[key][innerKey], key);",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"",
									"    // If the element doesn't exist, perform checks for all routes",
									"    if (!elementExists) {",
									"        for (var route in responseBody) {",
									"            if (typeof responseBody[route] === 'object') {",
									"                validateFields(responseBody[route], route);",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"// Function to perform field validations with notes",
									"function validateFields(element, route) {",
									"    // Function to validate whether a value is null or a string",
									"    function validateNullOrString(value) {",
									"        pm.expect(value === null || typeof value === 'string').to.be.true;",
									"    }",
									"",
									"    pm.test(`Inbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inbound);",
									"    });",
									"",
									"    pm.test(`Outbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.outbound);",
									"    });",
									"",
									"    pm.test(`Inclusives Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inclusives);",
									"    });",
									"",
									"    pm.test(`Billing Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.billing);",
									"    });",
									"",
									"    pm.test(`Call Rating Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.call_rating);",
									"    });",
									"",
									"    pm.test(`Minimum Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.min_charge);",
									"    });",
									"",
									"    pm.test(`Connection Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.connection_charge);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.rates&id={{SP-ID}}&route={{RouteID}}&dgroup={{DestGrID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.rates",
									"description": "Use ServicePlansRates.csv file for multiple list of SPs."
								},
								{
									"key": "id",
									"value": "{{SP-ID}}",
									"description": "Service Plan ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "route",
									"value": "{{RouteID}}",
									"description": "Route ID. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dgroup",
									"value": "{{DestGrID}}",
									"description": "Destination Group ID. Note: Only if route is supplied. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list` - List Service Plans\n\n`rates` - List Service Plan Rates"
		},
		{
			"name": "Destinations",
			"item": [
				{
					"name": "Listing Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There are no destinations created.\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There are no destinations created.\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Iterate through each destination in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var destination = responseBody[key];",
									"",
									"                    pm.test('Destination ' + destination.destination + ' Validation', function () {",
									"                        pm.expect(destination).to.be.an('object');",
									"                        pm.expect(destination).to.have.property('route').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination_group').that.is.a('string');",
									"",
									"                        // Check if \"codes\" is an array",
									"                        pm.expect(destination).to.have.property('codes').that.is.an('array');",
									"",
									"                        // If \"codes\" is an array, validate its structure",
									"                        if (Array.isArray(destination.codes)) {",
									"                            destination.codes.forEach(function (code) {",
									"                                pm.test('Code Validation', function () {",
									"                                    pm.expect(code).to.be.an('object');",
									"                                    pm.expect(code).to.have.property('code1').that.is.a('string');",
									"                                    pm.expect(code).to.have.property('code2').that.is.a('string');",
									"                                });",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.list"
								},
								{
									"key": "route",
									"value": "",
									"description": "Route ID. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dgroup",
									"value": "",
									"description": "Destination Group ID. Note: Only if route is supplied.(Regex: /^\\\\d+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Destinations Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test('Response Validation', function () {",
									"    pm.expect(responseBody).to.be.an('object');",
									"",
									"    // Iterate through each destination group in the response",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            var destinationGroupId = key;",
									"            var destinationGroupName = responseBody[key];",
									"",
									"            pm.test('Destination Group ' + destinationGroupName + ' Validation', function () {",
									"                pm.expect(destinationGroupId).to.be.a('string');",
									"                pm.expect(destinationGroupName).to.be.a('string');",
									"            });",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.groups",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.groups"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list` - List Destinations\n\n`groups` - List Destinations Groups"
		},
		{
			"name": "UADs",
			"item": [
				{
					"name": "Listing UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each UAD in the response",
									"        for (var uadId in responseBody) {",
									"            if (responseBody.hasOwnProperty(uadId)) {",
									"                var uad = responseBody[uadId];",
									"",
									"                pm.test('UAD ' + uadId + ' Validation', function () {",
									"                    pm.expect(uad).to.be.an('object');",
									"                    pm.expect(uad).to.have.property('name').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('fullname').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('enabled').that.is.a('boolean');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.activate&server={{Srv/Tenant-ID}}&id={{UADsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.activate"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "{{UADsID}}",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.deactivate&server={{Srv/Tenant-ID}}&id={{UADsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.deactivate"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "{{UADsID}}",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list` - List UADs\n\n`activate` - Activate UAD\n\n`deactivate` - Deactivate UAD"
		},
		{
			"name": "Apps",
			"item": [
				{
					"name": "Templates",
					"item": [
						{
							"name": "Templates List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure and content",
											"    pm.test('Response Validation', function () {",
											"        // Check if the response is an array",
											"        pm.expect(responseBody).to.be.an('array');",
											"",
											"        // Validate each object in the array",
											"        responseBody.forEach(function(template) {",
											"            pm.expect(template).to.be.an('object');",
											"            pm.expect(template).to.have.property('department_id').that.is.a('number');",
											"",
											"            // Validate department_name can be null or a string",
											"            pm.expect(template).to.have.property('department_name');",
											"            if (template.department_name !== null) {",
											"                pm.expect(template.department_name).to.be.a('string');",
											"            }",
											"",
											"            pm.expect(template).to.have.property('editions').that.is.a('string');",
											"            pm.expect(template).to.have.property('modules').that.is.a('string');",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.apps.templates.list&server={{tenantID}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.apps.templates.list",
											"description": "Templates list"
										},
										{
											"key": "server",
											"value": "{{tenantID}}",
											"description": "Tenant/Server ID (Required)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Templates Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure and content",
											"    pm.test('Response Validation', function () {",
											"        // Check if the response is an object",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Validate specific properties",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.apps.templates.set&server={{tenantID}}&department_id=&editions=&modules=",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.apps.templates.set",
											"description": "Templates set"
										},
										{
											"key": "server",
											"value": "{{tenantID}}",
											"description": "Tenant/Server ID (Required)"
										},
										{
											"key": "department_id",
											"value": "",
											"description": "Department ID (Required)"
										},
										{
											"key": "editions",
											"value": "",
											"description": "List of Editions separated with ,. The following values are accepted: all|none|agent|office|business|operator|supervisor|mobile|web"
										},
										{
											"key": "modules",
											"value": "",
											"description": "List of Modules separated with ,. The following values are accepted: all|none|crm|call popup|skype|omni channel|customer survey"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Apps Templates"
				},
				{
					"name": "Listing Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each edition/module in the response",
									"        for (var editionName in responseBody) {",
									"            if (responseBody.hasOwnProperty(editionName)) {",
									"                var edition = responseBody[editionName];",
									"",
									"                pm.test(editionName + ' Validation', function () {",
									"                    pm.expect(edition).to.be.an('object');",
									"                    pm.expect(edition).to.have.property('total').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('in_use').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('extensions').that.is.an('array');",
									"",
									"                    // Validate extensions",
									"                    pm.expect(edition.extensions).to.be.an('array');",
									"                    pm.expect(edition.extensions).to.have.lengthOf(edition.in_use);",
									"",
									"                    // Print edition/module details",
									"                    console.log(editionName + ' Total:', edition.total);",
									"                    console.log(editionName + ' In Use:', edition.in_use);",
									"                    console.log(editionName + ' Extensions:', edition.extensions);",
									"                });",
									"            }",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.apps.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.apps.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter DID list by Tenant ID.\nIf PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.\nID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list` - List Apps\n\nTemplates:\n\n- `set` - Set Templates for a specific department\n    \n- `list` - List Templates for all departments"
		},
		{
			"name": "License",
			"item": [
				{
					"name": "License Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('status').that.is.a('string');",
									"        console.log('License Refresh Status:', responseBody.status);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.refresh",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.refresh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "License Last Refreshed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('last_refreshed').that.is.a('string');",
									"        console.log('Last Refreshed Timestamp:', responseBody.last_refreshed);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.last_refreshed",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.last_refreshed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "License Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('Edition').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('Version').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('Channels').that.is.a('string');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.info",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.info"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`refresh` - Refresh license\n\n`last_refreshed` - Last time license file was modified\n\n`info` - License information"
		},
		{
			"name": "Monitor",
			"item": [
				{
					"name": "List Monitor Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check for error in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys of the response object",
									"        for (var key in responseBody) {",
									"            if (responseBody.hasOwnProperty(key)) {",
									"                var item = responseBody[key];",
									"                pm.expect(item).to.be.an('object');",
									"",
									"                // Add checks for specific fields within each item",
									"                pm.expect(item).to.have.property('name');",
									"                pm.expect(item.name).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ext');",
									"                pm.expect(item.ext).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ip');",
									"                pm.expect(item.ip).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('status');",
									"                pm.expect(item.status).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ua');",
									"                pm.expect(item.ua).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('dnd');",
									"                pm.expect(item.dnd).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"",
									"                pm.expect(item).to.have.property('on_call');",
									"                pm.expect(item.on_call).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.list",
									"description": "Show Monitor extensions"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Live Calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// If the message is not found, proceed with checking the JSON structure",
									"    pm.test('Status code is 200 OK', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"// Check if the response contains the \"Live Calls: 0\" message",
									"if (pm.response.text().includes(\"Live Calls: 0\")) {",
									"    // If the message is found, mark the test as failed",
									"    pm.test('Response Validation', function () {",
									"        pm.expect.fail(\"There is no active calls on selected Server/Tenant!\");",
									"    });",
									"} else {",
									"    const responseData = pm.response.json();",
									"",
									"    // Continue with the checks for the JSON structure",
									"    for (let callId in responseData) {",
									"        const call = responseData[callId];",
									"        pm.test(`From Field Check`, function () {",
									"            pm.expect(call).to.have.property('from').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`To Field Check`, function () {",
									"            pm.expect(call).to.have.property('to').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`Check timestamp field`, function () {",
									"            pm.expect(call).to.have.property('timestamp').to.be.a('number');",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.live_calls&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.live_calls",
									"description": "Show Live calls"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\\- List Monitor extensions\n\n`live_calls` - List Live calls"
		},
		{
			"name": "Departments",
			"item": [
				{
					"name": "Listing Departments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Check if the response contains at least one department",
									"        pm.expect(Object.keys(responseBody).length).to.be.above(0);",
									"",
									"        // Loop through each department and validate its properties",
									"        for (var departmentId in responseBody) {",
									"            if (responseBody.hasOwnProperty(departmentId)) {",
									"                pm.test('Department ' + departmentId + ' Validation', function () {",
									"                    var department = responseBody[departmentId];",
									"                    pm.expect(department).to.be.an('object');",
									"                    pm.expect(department).to.have.property('name').that.is.a('string');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.department.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.department.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter departments by tenant/server"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\\- List Destinations"
		},
		{
			"name": "Call Recording",
			"item": [
				{
					"name": "Start Recording",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('affected_calls').that.is.a('number');",
									"",
									"        // Check success message",
									"        pm.test('Verify success message', function () {",
									"            var expectedMessages = [",
									"                'Call status updated successfully.',",
									"                'No calls have been updated.'",
									"            ];",
									"            pm.expect(expectedMessages).to.include(responseBody.success);",
									"        });",
									"",
									"        // Check affected_calls value",
									"        pm.test('Verify affected_calls value', function () {",
									"            pm.expect(responseBody.affected_calls).to.be.oneOf([0, 1]);",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.recording.start&server={{Srv/Tenant-ID}}&ext={{extension}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.recording.start",
									"description": "Start call recording for a specific extension."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop Recording",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('affected_calls').that.is.a('number');",
									"",
									"        // Check success message",
									"        pm.test('Verify success message', function () {",
									"            var expectedMessages = [",
									"                'Call status updated successfully.',",
									"                'No calls have been updated.'",
									"            ];",
									"            pm.expect(expectedMessages).to.include(responseBody.success);",
									"        });",
									"",
									"        // Check affected_calls value",
									"        pm.test('Verify affected_calls value', function () {",
									"            pm.expect(responseBody.affected_calls).to.be.oneOf([0, 1]);",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.recording.stop&server={{Srv/Tenant-ID}}&ext={{extension}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.recording.stop",
									"description": "Stop call recording for a specific extension."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Recording",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('affected_calls').that.is.a('number');",
									"",
									"        // Check success message",
									"        pm.test('Verify success message', function () {",
									"            var expectedMessages = [",
									"                'Call status updated successfully.',",
									"                'No calls have been updated.'",
									"            ];",
									"            pm.expect(expectedMessages).to.include(responseBody.success);",
									"        });",
									"",
									"        // Check affected_calls value",
									"        pm.test('Verify affected_calls value', function () {",
									"            pm.expect(responseBody.affected_calls).to.be.oneOf([0, 1]);",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.recording.pause&server={{Srv/Tenant-ID}}&ext={{extension}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.recording.pause",
									"description": "Pause call recording for a specific extension."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unpause Recording",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure and content",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('affected_calls').that.is.a('number');",
									"",
									"        // Check success message",
									"        pm.test('Verify success message', function () {",
									"            var expectedMessages = [",
									"                'Call status updated successfully.',",
									"                'No calls have been updated.'",
									"            ];",
									"            pm.expect(expectedMessages).to.include(responseBody.success);",
									"        });",
									"",
									"        // Check affected_calls value",
									"        pm.test('Verify affected_calls value', function () {",
									"            pm.expect(responseBody.affected_calls).to.be.oneOf([0, 1]);",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.recording.unpause&server={{Srv/Tenant-ID}}&ext={{extension}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.recording.unpause",
									"description": "Start call recording for a specific extension."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`start` - Start call recording for a specific extension\n\n`stop` - Stop call recording for a specific extension\n\n`pause` - Pause call recording for a specific extension\n\n`unpause` - Unpause call recording for a specific extension"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_Key",
			"value": "Test123456789",
			"type": "string"
		},
		{
			"key": "IP",
			"value": "",
			"type": "string"
		},
		{
			"key": "Srv/Tenant-ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "tenant_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "tenant_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "tenantPackageId",
			"value": "",
			"type": "string"
		},
		{
			"key": "tenantID",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "extension",
			"value": "",
			"type": "string"
		},
		{
			"key": "secret",
			"value": "",
			"type": "string"
		},
		{
			"key": "pin",
			"value": "",
			"type": "string"
		},
		{
			"key": "trunkID",
			"value": "",
			"type": "string"
		},
		{
			"key": "did",
			"value": "",
			"type": "string"
		},
		{
			"key": "ext",
			"value": "",
			"type": "string"
		},
		{
			"key": "ExtensionID",
			"value": "",
			"type": "string"
		},
		{
			"key": "ExtensionIDs",
			"value": ""
		},
		{
			"key": "DateStart",
			"value": "",
			"type": "string"
		},
		{
			"key": "DateEnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "StartTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "EndTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkIDs",
			"value": ""
		},
		{
			"key": "TrunkName",
			"value": "",
			"type": "string"
		},
		{
			"key": "ProviderID",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkType",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkDTMFmode",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "Country",
			"value": "",
			"type": "string"
		},
		{
			"key": "NationalCode",
			"value": "",
			"type": "string"
		},
		{
			"key": "InternationalCode",
			"value": "",
			"type": "string"
		},
		{
			"key": "EmergTrunk",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkHost",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkPeerHost",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkPeerUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkPeerSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkInsecure",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkLooseRouting",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkIncomingLimit",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkOutgoingLimit",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkBusyLevel",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkCodecs",
			"value": "",
			"type": "string"
		},
		{
			"key": "TrunkCodecsPrimeTime",
			"value": "",
			"type": "string"
		},
		{
			"key": "SMSTrunkIDs",
			"value": "",
			"type": "string"
		},
		{
			"key": "SMSTrunkEnabled",
			"value": "",
			"type": "string"
		},
		{
			"key": "SMSTrunkName",
			"value": "",
			"type": "string"
		},
		{
			"key": "SMSTrunkProvider",
			"value": "",
			"type": "string"
		},
		{
			"key": "TelnyxAPI",
			"value": "",
			"type": "string"
		},
		{
			"key": "TelnyxPublicKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "TelnyxProfileID",
			"value": "",
			"type": "string"
		},
		{
			"key": "BandwithUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "BandwithPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "BandwithUserID",
			"value": "",
			"type": "string"
		},
		{
			"key": "BandwithAppID",
			"value": "",
			"type": "string"
		},
		{
			"key": "TwilioAccSID",
			"value": "",
			"type": "string"
		},
		{
			"key": "TwilioAuthToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "VoipSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "VoipLogin",
			"value": "",
			"type": "string"
		},
		{
			"key": "OzAPI",
			"value": "",
			"type": "string"
		},
		{
			"key": "OzUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "DID",
			"value": "",
			"type": "string"
		},
		{
			"key": "Destination",
			"value": "",
			"type": "string"
		},
		{
			"key": "DestType",
			"value": "",
			"type": "string"
		},
		{
			"key": "DID-Disabled",
			"value": "",
			"type": "string"
		},
		{
			"key": "DID-IDs",
			"value": ""
		},
		{
			"key": "DIDGroupName",
			"value": "",
			"type": "string"
		},
		{
			"key": "DIDMin",
			"value": "",
			"type": "string"
		},
		{
			"key": "DIDMax",
			"value": "",
			"type": "string"
		},
		{
			"key": "DIDGroupID",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRName",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRNum",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRGreet",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRKeyMap",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVRsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key0Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key0Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key1Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key1Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key2Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key2Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key3Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key3Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key4Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key4Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key5Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key5Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key6Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key6Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key7Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key7Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key8Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key8Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key9Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key9Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key*Type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Key*Dest",
			"value": "",
			"type": "string"
		},
		{
			"key": "RGsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "RGName",
			"value": "",
			"type": "string"
		},
		{
			"key": "RGNum",
			"value": "",
			"type": "string"
		},
		{
			"key": "RGExt",
			"value": "",
			"type": "string"
		},
		{
			"key": "ERGsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "ERGPenal",
			"value": "",
			"type": "string"
		},
		{
			"key": "OperationTimesID",
			"value": ""
		},
		{
			"key": "TenantPackageName",
			"value": "",
			"type": "string"
		},
		{
			"key": "TenantPackageID",
			"value": "",
			"type": "string"
		},
		{
			"key": "ExtLength",
			"value": "",
			"type": "string"
		},
		{
			"key": "TenantStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "UADsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "Primary",
			"value": "",
			"type": "string"
		},
		{
			"key": "Secondary",
			"value": "",
			"type": "string"
		},
		{
			"key": "Tertiary",
			"value": "",
			"type": "string"
		},
		{
			"key": "PrimaryEm",
			"value": "",
			"type": "string"
		},
		{
			"key": "SecondaryEm",
			"value": "",
			"type": "string"
		},
		{
			"key": "TertiaryEm",
			"value": "",
			"type": "string"
		},
		{
			"key": "CallerID",
			"value": "",
			"type": "string"
		},
		{
			"key": "MatchEx",
			"value": "",
			"type": "string"
		},
		{
			"key": "CLIRoutingID",
			"value": "",
			"type": "string"
		},
		{
			"key": "SP-ID",
			"value": "",
			"type": "string"
		},
		{
			"key": "RouteID",
			"value": "",
			"type": "string"
		},
		{
			"key": "DestGrID",
			"value": "",
			"type": "string"
		},
		{
			"key": "IVR-ID",
			"value": ""
		},
		{
			"key": "ERG_Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "ERG_Number",
			"value": "",
			"type": "string"
		},
		{
			"key": "ERGMaxCallers",
			"value": "",
			"type": "string"
		},
		{
			"key": "ERGRingToAnswer",
			"value": "",
			"type": "string"
		}
	]
}